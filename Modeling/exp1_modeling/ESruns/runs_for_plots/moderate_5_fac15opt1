ccopy_reg
_reconstructor
p0
(cbayesian_optimization
BayesianOptimizer
p1
cdill.dill
_load_type
p2
(S'ObjectType'
p3
tp4
Rp5
Ntp6
Rp7
(dp8
S'optimizer'
p9
S'direct'
p10
sS'acquisition_function'
p11
g0
(cacquisition_functions
EntropySearch
p12
g5
Ntp13
Rp14
(dp15
S'percent_points'
p16
cnumpy.core.multiarray
_reconstruct
p17
(cnumpy
ndarray
p18
(I0
tp19
S'b'
p20
tp21
Rp22
(I1
(I30
tp23
cnumpy
dtype
p24
(S'f8'
p25
I0
I1
tp26
Rp27
(I3
S'<'
p28
NNNI-1
I-1
I0
tp29
bI00
S'\x87\xddi\x94<\x06\x01\xc0\xbejg\tRQ\xfa\xbf"Q\'s\xbe \xf6\xbf\xbcr\x83\xd5\xad\x11\xf3\xbfl\xbb\x85-;\x95\xf0\xbf\xf8K\xe2\x124\xe3\xec\xbf]}\x16ao\x12\xe9\xbfI\x8aR\x87k\x95\xe5\xbfH\xa2N\n\xc0U\xe2\xbf\xdf\xd8\xce\x93\xd4\x87\xde\xbfO\xccl,\x17\xa9\xd8\xbf\xcf\xf7\xb3\xb3\xc0\xfd\xd2\xbf\xac\xe9\xb8OQ\xef\xca\xbf\xd0\x92\x8e\xc7\xab\x15\xc0\xbf\x01\x92\xe3&he\xa5\xbf\xed\x91\xe3&he\xa5?\xd5\x92\x8e\xc7\xab\x15\xc0?\xb1\xe9\xb8OQ\xef\xca?\xcf\xf7\xb3\xb3\xc0\xfd\xd2?O\xccl,\x17\xa9\xd8?\xdf\xd8\xce\x93\xd4\x87\xde?H\xa2N\n\xc0U\xe2?I\x8aR\x87k\x95\xe5?]}\x16ao\x12\xe9?\xf8K\xe2\x124\xe3\xec?l\xbb\x85-;\x95\xf0?\xb9r\x83\xd5\xad\x11\xf3?"Q\'s\xbe \xf6?\xbbjg\tRQ\xfa?\x85\xddi\x94<\x06\x01@'
p30
tp31
bsS'X_candidate'
p32
g17
(g18
(I0
tp33
g20
tp34
Rp35
(I1
(I40
I2
tp36
g27
I01
S'\xfc\xa9\xf1\xd2MbP?\xba\xbep\xf7\xc8G\x9b?j1\xd9\x88\xb6\xc4\xaa?\xbc\x01\xfdJ\xc4\xf2\xb3?\xc2j\x8dQ-\x83\xba?\xe4\xe9\x0e,\xcb\x89\xc0?h\x1eW\xaf\xff\xd1\xc3?\xebR\x9f24\x1a\xc7?n\x87\xe7\xb5hb\xca?\xf1\xbb/9\x9d\xaa\xcd?:\xf8;\xdehy\xd0?|\x12\xe0\x1f\x83\x1d\xd2?\xbe,\x84a\x9d\xc1\xd3?\xffF(\xa3\xb7e\xd5?Aa\xcc\xe4\xd1\t\xd7?\x82{p&\xec\xad\xd8?\xc4\x95\x14h\x06R\xda?\x06\xb0\xb8\xa9 \xf6\xdb?G\xca\\\xeb:\x9a\xdd?\x89\xe4\x00-U>\xdf?e\x7fR\xb77q\xe0?\x86\x8c$\xd8DC\xe1?\xa7\x99\xf6\xf8Q\x15\xe2?\xc8\xa6\xc8\x19_\xe7\xe2?\xe9\xb3\x9a:l\xb9\xe3?\t\xc1l[y\x8b\xe4?*\xce>|\x86]\xe5?K\xdb\x10\x9d\x93/\xe6?l\xe8\xe2\xbd\xa0\x01\xe7?\x8d\xf5\xb4\xde\xad\xd3\xe7?\xad\x02\x87\xff\xba\xa5\xe8?\xce\x0fY \xc8w\xe9?\xef\x1c+A\xd5I\xea?\x10*\xfda\xe2\x1b\xeb?17\xcf\x82\xef\xed\xeb?QD\xa1\xa3\xfc\xbf\xec?rQs\xc4\t\x92\xed?\x93^E\xe5\x16d\xee?\xb4k\x17\x06$6\xef?j\xbct\x93\x18\x04\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\xf0?'
p37
tp38
bsS'base_entropy'
p39
cnumpy.core.multiarray
scalar
p40
(g27
S'\rr2;\xd3\x82\r@'
p41
tp42
Rp43
sS'rng_seed'
p44
I0
sS'n_trial_points'
p45
I500
sS'n_gp_samples'
p46
I500
sS'model'
p47
g0
(cGPy.models.gp_heteroscedastic_regression
GPHeteroscedasticRegression
p48
g5
Ntp49
Rp50
(dp51
S'_added_names_'
p52
c__builtin__
set
p53
((lp54
S'het_Gauss'
p55
aS'sum'
p56
atp57
Rp58
sS'sampling_runs'
p59
(lp60
sS'mean_function'
p61
NsS'_name'
p62
S'gp'
p63
sS'_optimizer_copy_transformed'
p64
I00
sS'size'
p65
I26
sS'parameters'
p66
g0
(cparamz.core.lists_and_dicts
ArrayList
p67
g2
(S'ListType'
p68
tp69
Rp70
(lp71
g0
(cGPy.kern.src.add
Add
p72
g5
Ntp73
Rp74
(dp75
g52
g53
((lp76
S'mul'
p77
aS'sim'
p78
atp79
Rp80
sS'psicomp'
p81
g0
(cGPy.kern.src.psi_comp.gaussherm
PSICOMP_GH
p82
g5
Ntp83
Rp84
(dp85
S'locs'
p86
g17
(g18
(I0
tp87
g20
tp88
Rp89
(I1
(I11
tp90
g27
I00
S'/1\x99d\x83\xc0\x14\xc0 \xd8\t\xebD}\x0f\xc0\x1a\xd0\x0f\xb1\xc5\xeb\x06\xc0\xc5s\x1bL=\x04\xfe\xbf\xad\xa3\xc0yK\xb9\xed\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xad\xa3\xc0yK\xb9\xed?\xc5s\x1bL=\x04\xfe?\x1a\xd0\x0f\xb1\xc5\xeb\x06@ \xd8\t\xebD}\x0f@/1\x99d\x83\xc0\x14@'
p91
tp92
bsS'cache_K'
p93
I01
sS'weights'
p94
g17
(g18
(I0
tp95
g20
tp96
Rp97
(I1
(I11
tp98
g27
I00
S'B\x11\x1c\xa8\x9d@\xab>\x1c\x0b \x15\xa9\xa5)?\x12\x1d\xe7\xd4\xba\x86{?\xfe\xa6_\x07x\xee\xb0?\x00\xb0\xdd\xea\xba\x01\xcf?\x8a\x91^\x00c\xa4\xd7?\x00\xb0\xdd\xea\xba\x01\xcf?\xfe\xa6_\x07x\xee\xb0?\x12\x1d\xe7\xd4\xba\x86{?\x1c\x0b \x15\xa9\xa5)?B\x11\x1c\xa8\x9d@\xab>'
p99
tp100
bsS'degree'
p101
I11
sS'Xs'
p102
Nsbsg62
g56
sg64
I00
sg65
I5
sg66
g0
(g67
g70
(lp103
g0
(cGPy.kern.src.rbf
RBF
p104
g5
Ntp105
Rp106
(dp107
g52
g53
((lp108
tp109
Rp110
sg81
g0
(cGPy.kern.src.psi_comp
PSICOMP_RBF
p111
g5
Ntp112
Rp113
(dp114
g64
I00
sbsg62
g78
sg64
I00
sg65
I2
sg66
g0
(g67
g70
(lp115
g17
(cGPy.core.parameterization.param
Param
p116
(I0
tp117
g20
tp118
Rp119
((I1
(I1
tp120
g27
I00
S'\x07r\x00/*\xbc9@'
p121
tp122
(dp123
g52
g53
((lp124
tp125
Rp126
sS'_realshape_'
p127
(I1
tp128
sS'_default_constraint_'
p129
g0
(cparamz.transformations
Logexp
p130
g5
Ntp131
Rp132
sS'_update_on'
p133
I01
sg66
g0
(g67
g70
(lp134
tp135
Rp136
sS'_model_initialized_'
p137
I01
sS'_index_operations'
p138
ccollections
OrderedDict
p139
((lp140
(lp141
S'constraints'
p142
ag0
(cparamz.core.index_operations
ParameterIndexOperationsView
p143
g5
Ntp144
Rp145
(lp146
g0
(cparamz.core.index_operations
ParameterIndexOperations
p147
g5
Ntp148
Rp149
(dp150
S'_properties'
p151
cparamz.core.lists_and_dicts
IntArrayDict
p152
(cparamz.core.lists_and_dicts
intarray_default_factory
p153
tp154
Rp155
g132
g17
(g18
(I0
tp156
g20
tp157
Rp158
(I1
(I26
tp159
g24
(S'i8'
p160
I0
I1
tp161
Rp162
(I3
S'<'
p163
NNNI-1
I-1
I0
tp164
bI00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00'
p165
tp166
bsS'fixed'
p167
g17
(g18
(I0
tp168
g20
tp169
Rp170
(I1
(I0
tp171
g162
I00
S''
p172
tp173
bssbaI0
aI1
abaa(lp174
S'priors'
p175
ag0
(g143
g5
Ntp176
Rp177
(lp178
g0
(g147
g5
Ntp179
Rp180
(dp181
g151
g152
(g153
tp182
Rp183
sbaI0
aI1
abaatp184
Rp185
sS'_parent_'
p186
g106
sS'_in_init_'
p187
I00
sS'_default_prior_'
p188
NsS'_parent_index_'
p189
I0
sS'_Parameterizable__visited'
p190
I00
sS'_current_slice_'
p191
(g2
(S'SliceType'
p192
tp193
Rp194
(NI1
Ntp195
Rp196
tp197
sS'_realndim_'
p198
I1
sS'_realsize_'
p199
I1
sg62
S'variance'
p200
sg64
I00
sS'_original_'
p201
g119
stp202
bag17
(g116
(I0
tp203
g20
tp204
Rp205
((I1
(I1
tp206
g27
I00
S'\xb8\x1e\x85\xebQ\xb8\x9e?'
p207
tp208
(dp209
g52
g53
((lp210
tp211
Rp212
sg127
(I1
tp213
sg129
g132
sg133
I01
sg66
g0
(g67
g70
(lp214
tp215
Rp216
sg137
I01
sg138
g139
((lp217
(lp218
g142
ag0
(g143
g5
Ntp219
Rp220
(lp221
g149
aI1
aI1
abaa(lp222
g175
ag0
(g143
g5
Ntp223
Rp224
(lp225
g180
aI1
aI1
abaatp226
Rp227
sg186
g106
sg187
I00
sg188
Nsg189
I1
sg190
I00
sg191
(g194
(NI1
Ntp228
Rp229
tp230
sg198
I1
sg199
I1
sg62
S'lengthscale'
p231
sg64
I00
sg201
g205
stp232
batp233
Rp234
sS'useGPU'
p235
I00
sg186
g74
sg187
I00
sS'_param_slices_'
p236
(lp237
g194
(I0
I1
Ntp238
Rp239
ag194
(I1
I2
Ntp240
Rp241
asg190
I00
sg188
NsS'_all_dims_active'
p242
g17
(g18
(I0
tp243
g20
tp244
Rp245
(I1
(I1
tp246
g162
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p247
tp248
bsS'active_dims'
p249
g17
(g18
(I0
tp250
g20
tp251
Rp252
(I1
(I1
tp253
g162
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p254
tp255
bsg138
g139
((lp256
(lp257
g142
ag0
(g143
g5
Ntp258
Rp259
(lp260
g149
aI0
aI2
abaa(lp261
g175
ag0
(g143
g5
Ntp262
Rp263
(lp264
g180
aI0
aI2
abaatp265
Rp266
sS'__doc__'
p267
S'\n    Radial Basis Function kernel, aka squared-exponential, exponentiated quadratic or Gaussian kernel:\n\n    .. math::\n\n       k(r) = \\sigma^2 \\exp \\bigg(- \\frac{1}{2} r^2 \\bigg)\n\n    Inherited from Stationary: \n\n    Stationary kernels (covariance functions).\n\n    Stationary covariance fucntion depend only on r, where r is defined as\n\n    .. math::\n        r(x, x\') = \\sqrt{ \\sum_{q=1}^Q (x_q - x\'_q)^2 }\n\n    The covariance function k(x, x\' can then be written k(r).\n\n    In this implementation, r is scaled by the lengthscales parameter(s):\n\n    .. math::\n\n        r(x, x\') = \\sqrt{ \\sum_{q=1}^Q \\frac{(x_q - x\'_q)^2}{\\ell_q^2} }.\n\n    By default, there\'s only one lengthscale: seaprate lengthscales for each\n    dimension can be enables by setting ARD=True.\n\n    To implement a stationary covariance function using this class, one need\n    only define the covariance function k(r), and it derivative.\n\n    ```\n    def K_of_r(self, r):\n        return foo\n    def dK_dr(self, r):\n        return bar\n    ```\n\n    The lengthscale(s) and variance parameters are added to the structure automatically.\n\n    Thanks to @strongh:\n    In Stationary, a covariance function is defined in GPy as stationary when it depends only on the l2-norm |x_1 - x_2 |.\n    However this is the typical definition of isotropy, while stationarity is usually a bit more relaxed.\n    The more common version of stationarity is that the covariance is a function of x_1 - x_2 (See e.g. R&W first paragraph of section 4.1).\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p268
sg129
Nsg133
I01
sg137
I01
sS'_sliced_X'
p269
I0
sS'use_invLengthscale'
p270
I00
sS'ARD'
p271
I00
sg189
I0
sS'input_dim'
p272
I1
sg231
g205
sg200
g119
sbag0
(cGPy.kern.src.prod
Prod
p273
g5
Ntp274
Rp275
(dp276
g52
g53
((lp277
S'delta'
p278
aS'error'
p279
atp280
Rp281
sg81
g0
(g82
g5
Ntp282
Rp283
(dp284
g101
I11
sg86
g17
(g18
(I0
tp285
g20
tp286
Rp287
(I1
(I11
tp288
g27
I00
S'/1\x99d\x83\xc0\x14\xc0 \xd8\t\xebD}\x0f\xc0\x1a\xd0\x0f\xb1\xc5\xeb\x06\xc0\xc5s\x1bL=\x04\xfe\xbf\xad\xa3\xc0yK\xb9\xed\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xad\xa3\xc0yK\xb9\xed?\xc5s\x1bL=\x04\xfe?\x1a\xd0\x0f\xb1\xc5\xeb\x06@ \xd8\t\xebD}\x0f@/1\x99d\x83\xc0\x14@'
p289
tp290
bsg93
I01
sg94
g17
(g18
(I0
tp291
g20
tp292
Rp293
(I1
(I11
tp294
g27
I00
S'B\x11\x1c\xa8\x9d@\xab>\x1c\x0b \x15\xa9\xa5)?\x12\x1d\xe7\xd4\xba\x86{?\xfe\xa6_\x07x\xee\xb0?\x00\xb0\xdd\xea\xba\x01\xcf?\x8a\x91^\x00c\xa4\xd7?\x00\xb0\xdd\xea\xba\x01\xcf?\xfe\xa6_\x07x\xee\xb0?\x12\x1d\xe7\xd4\xba\x86{?\x1c\x0b \x15\xa9\xa5)?B\x11\x1c\xa8\x9d@\xab>'
p295
tp296
bsg102
Nsg64
I00
sbsg64
I00
sg65
I3
sg66
g0
(g67
g70
(lp297
g0
(cGPy.kern.src.basis_funcs
DomainKernel
p298
g5
Ntp299
Rp300
(dp301
g52
g53
((lp302
tp303
Rp304
sg81
g0
(g82
g5
Ntp305
Rp306
(dp307
g101
I11
sg86
g17
(g18
(I0
tp308
g20
tp309
Rp310
(I1
(I11
tp311
g27
I00
S'/1\x99d\x83\xc0\x14\xc0 \xd8\t\xebD}\x0f\xc0\x1a\xd0\x0f\xb1\xc5\xeb\x06\xc0\xc5s\x1bL=\x04\xfe\xbf\xad\xa3\xc0yK\xb9\xed\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xad\xa3\xc0yK\xb9\xed?\xc5s\x1bL=\x04\xfe?\x1a\xd0\x0f\xb1\xc5\xeb\x06@ \xd8\t\xebD}\x0f@/1\x99d\x83\xc0\x14@'
p312
tp313
bsg93
I01
sg94
g17
(g18
(I0
tp314
g20
tp315
Rp316
(I1
(I11
tp317
g27
I00
S'B\x11\x1c\xa8\x9d@\xab>\x1c\x0b \x15\xa9\xa5)?\x12\x1d\xe7\xd4\xba\x86{?\xfe\xa6_\x07x\xee\xb0?\x00\xb0\xdd\xea\xba\x01\xcf?\x8a\x91^\x00c\xa4\xd7?\x00\xb0\xdd\xea\xba\x01\xcf?\xfe\xa6_\x07x\xee\xb0?\x12\x1d\xe7\xd4\xba\x86{?\x1c\x0b \x15\xa9\xa5)?B\x11\x1c\xa8\x9d@\xab>'
p318
tp319
bsg102
Nsg64
I00
sbsg64
I00
sg65
I1
sg187
I00
sg66
g0
(g67
g70
(lp320
g17
(g116
(I0
tp321
g20
tp322
Rp323
((I1
(I1
tp324
g27
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p325
tp326
(dp327
g52
g53
((lp328
tp329
Rp330
sg127
(I1
tp331
sg129
g132
sg133
I01
sg66
g0
(g67
g70
(lp332
tp333
Rp334
sg137
I01
sg138
g139
((lp335
(lp336
g142
ag0
(g143
g5
Ntp337
Rp338
(lp339
g149
aI2
aI1
abaa(lp340
g175
ag0
(g143
g5
Ntp341
Rp342
(lp343
g180
aI2
aI1
abaatp344
Rp345
sg186
g300
sg187
I00
sg188
Nsg189
I0
sg190
I00
sg191
(g194
(NI1
Ntp346
Rp347
tp348
sg198
I1
sg199
I1
sg62
g200
sg64
I00
sg201
g323
stp349
batp350
Rp351
sg235
I00
sS'start'
p352
g17
(g18
(I0
tp353
g20
tp354
Rp355
(I1
(tg27
I00
S'\x00\x00\x00\x00\x00\x00\xe0?'
p356
tp357
bsg186
g275
sg189
I0
sg236
(lp358
g194
(I0
I1
Ntp359
Rp360
asg190
I00
sg188
Nsg242
g17
(g18
(I0
tp361
g20
tp362
Rp363
(I1
(I1
tp364
g162
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p365
tp366
bsg249
g17
(g18
(I0
tp367
g20
tp368
Rp369
(I1
(I1
tp370
g162
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p371
tp372
bsS'stop'
p373
g17
(g18
(I0
tp374
g20
tp375
Rp376
(I1
(tg27
I00
S'\x00\x00\x00\x00\x00\x00\xf8?'
p377
tp378
bsg138
g139
((lp379
(lp380
g142
ag0
(g143
g5
Ntp381
Rp382
(lp383
g149
aI2
aI1
abaa(lp384
g175
ag0
(g143
g5
Ntp385
Rp386
(lp387
g180
aI2
aI1
abaatp388
Rp389
sS'beta'
p390
g17
(g18
(I0
tp391
g20
tp392
Rp393
(I1
(I1
tp394
g27
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p395
tp396
bsg267
S'\n    Create a constant plateou of correlation between start and stop and zero\n    elsewhere. This is a constant shift of the outputs along the yaxis\n    in the range from start to stop.\n    Inherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p397
sS'alpha'
p398
g17
(g18
(I0
tp399
g20
tp400
Rp401
(I1
(I1
tp402
g27
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p403
tp404
bsg129
Nsg133
I01
sg137
I01
sg269
I0
sg62
g278
sg271
I00
sg272
I1
sg200
g323
sbag0
(g104
g5
Ntp405
Rp406
(dp407
g52
g53
((lp408
tp409
Rp410
sg81
g0
(g111
g5
Ntp411
Rp412
(dp413
g64
I00
sbsg62
g279
sg64
I00
sg65
I2
sg66
g0
(g67
g70
(lp414
g17
(g116
(I0
tp415
g20
tp416
Rp417
((I1
(I1
tp418
g27
I00
S'Z\xa2\x9a\x1d\xbe\x950@'
p419
tp420
(dp421
g52
g53
((lp422
tp423
Rp424
sg127
(I1
tp425
sg129
g132
sg133
I01
sg66
g0
(g67
g70
(lp426
tp427
Rp428
sg137
I01
sg138
g139
((lp429
(lp430
g142
ag0
(g143
g5
Ntp431
Rp432
(lp433
g149
aI3
aI1
abaa(lp434
g175
ag0
(g143
g5
Ntp435
Rp436
(lp437
g180
aI3
aI1
abaatp438
Rp439
sg186
g406
sg187
I00
sg188
Nsg189
I0
sg190
I00
sg191
(g194
(NI1
Ntp440
Rp441
tp442
sg198
I1
sg199
I1
sg62
g200
sg64
I00
sg201
g417
stp443
bag17
(g116
(I0
tp444
g20
tp445
Rp446
((I1
(I1
tp447
g27
I00
S'\xb8\x1e\x85\xebQ\xb8\x9e?'
p448
tp449
(dp450
g52
g53
((lp451
tp452
Rp453
sg127
(I1
tp454
sg129
g132
sg133
I01
sg66
g0
(g67
g70
(lp455
tp456
Rp457
sg137
I01
sg138
g139
((lp458
(lp459
g142
ag0
(g143
g5
Ntp460
Rp461
(lp462
g149
aI4
aI1
abaa(lp463
g175
ag0
(g143
g5
Ntp464
Rp465
(lp466
g180
aI4
aI1
abaatp467
Rp468
sg186
g406
sg187
I00
sg188
Nsg189
I1
sg190
I00
sg191
(g194
(NI1
Ntp469
Rp470
tp471
sg198
I1
sg199
I1
sg62
g231
sg64
I00
sg201
g446
stp472
batp473
Rp474
sg235
I00
sg186
g275
sg187
I00
sg236
(lp475
g194
(I0
I1
Ntp476
Rp477
ag194
(I1
I2
Ntp478
Rp479
asg190
I00
sg267
S'\n    Radial Basis Function kernel, aka squared-exponential, exponentiated quadratic or Gaussian kernel:\n\n    .. math::\n\n       k(r) = \\sigma^2 \\exp \\bigg(- \\frac{1}{2} r^2 \\bigg)\n\n    Inherited from Stationary: \n\n    Stationary kernels (covariance functions).\n\n    Stationary covariance fucntion depend only on r, where r is defined as\n\n    .. math::\n        r(x, x\') = \\sqrt{ \\sum_{q=1}^Q (x_q - x\'_q)^2 }\n\n    The covariance function k(x, x\' can then be written k(r).\n\n    In this implementation, r is scaled by the lengthscales parameter(s):\n\n    .. math::\n\n        r(x, x\') = \\sqrt{ \\sum_{q=1}^Q \\frac{(x_q - x\'_q)^2}{\\ell_q^2} }.\n\n    By default, there\'s only one lengthscale: seaprate lengthscales for each\n    dimension can be enables by setting ARD=True.\n\n    To implement a stationary covariance function using this class, one need\n    only define the covariance function k(r), and it derivative.\n\n    ```\n    def K_of_r(self, r):\n        return foo\n    def dK_dr(self, r):\n        return bar\n    ```\n\n    The lengthscale(s) and variance parameters are added to the structure automatically.\n\n    Thanks to @strongh:\n    In Stationary, a covariance function is defined in GPy as stationary when it depends only on the l2-norm |x_1 - x_2 |.\n    However this is the typical definition of isotropy, while stationarity is usually a bit more relaxed.\n    The more common version of stationarity is that the covariance is a function of x_1 - x_2 (See e.g. R&W first paragraph of section 4.1).\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p480
sg242
g17
(g18
(I0
tp481
g20
tp482
Rp483
(I1
(I1
tp484
g162
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p485
tp486
bsg249
g17
(g18
(I0
tp487
g20
tp488
Rp489
(I1
(I1
tp490
g162
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p491
tp492
bsg138
g139
((lp493
(lp494
g142
ag0
(g143
g5
Ntp495
Rp496
(lp497
g149
aI3
aI2
abaa(lp498
g175
ag0
(g143
g5
Ntp499
Rp500
(lp501
g180
aI3
aI2
abaatp502
Rp503
sg129
Nsg133
I01
sg137
I01
sg269
I0
sg270
I00
sg271
I00
sg189
I1
sg272
I1
sg231
g446
sg200
g417
sg188
Nsbatp504
Rp505
sg235
I00
sg186
g74
sg187
I00
sg236
(lp506
g194
(I0
I1
Ntp507
Rp508
ag194
(I1
I3
Ntp509
Rp510
asg190
I00
sS'extra_dims'
p511
g17
(g18
(I0
tp512
g20
tp513
Rp514
(I1
(I0
tp515
g162
I00
g172
tp516
bsg188
Nsg242
g17
(g18
(I0
tp517
g20
tp518
Rp519
(I1
(I2
tp520
g162
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
p521
tp522
bsg249
g17
(g18
(I0
tp523
g20
tp524
Rp525
(I1
(I2
tp526
g162
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
p527
tp528
bsg138
g139
((lp529
(lp530
g142
ag0
(g143
g5
Ntp531
Rp532
(lp533
g149
aI2
aI3
abaa(lp534
g175
ag0
(g143
g5
Ntp535
Rp536
(lp537
g180
aI2
aI3
abaatp538
Rp539
sg267
S'\n    Computes the product of 2 kernels\n\n    :param k1, k2: the kernels to multiply\n    :type k1, k2: Kern\n    :rtype: kernel object\n\n    Inherited from CombinationKernel: \n\n    Abstract super class for combination kernels.\n    A combination kernel combines (a list of) kernels and works on those.\n    Examples are the HierarchicalKernel or Add and Prod kernels.\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p540
sg278
g300
sg129
Nsg133
I01
sg137
I01
sg269
I0
sg62
g77
sg189
I1
sg272
I2
sg279
g406
sbatp541
Rp542
sg235
I00
sg186
g50
sg187
I00
sg236
(lp543
g194
(I0
I2
Ntp544
Rp545
ag194
(I2
I5
Ntp546
Rp547
asg190
I00
sg77
g275
sg511
g17
(g18
(I0
tp548
g20
tp549
Rp550
(I1
(I0
tp551
g162
I00
g172
tp552
bsg188
Nsg78
g106
sg242
g17
(g18
(I0
tp553
g20
tp554
Rp555
(I1
(I2
tp556
g162
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
p557
tp558
bsg249
g17
(g18
(I0
tp559
g20
tp560
Rp561
(I1
(I2
tp562
g162
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
p563
tp564
bsg138
g139
((lp565
(lp566
g142
ag0
(g143
g5
Ntp567
Rp568
(lp569
g149
aI0
aI5
abaa(lp570
g175
ag0
(g143
g5
Ntp571
Rp572
(lp573
g180
aI0
aI5
abaatp574
Rp575
sg129
Nsg133
I01
sg137
I01
sg269
I0
sS'_exact_psicomp'
p576
I00
sg267
S'\n    Add given list of kernels together.\n    propagates gradients through.\n\n    This kernel will take over the active dims of it\'s subkernels passed in.\n\n    NOTE: The subkernels will be copies of the original kernels, to prevent\n    unexpected behavior.\n    Inherited from CombinationKernel: \n\n    Abstract super class for combination kernels.\n    A combination kernel combines (a list of) kernels and works on those.\n    Examples are the HierarchicalKernel or Add and Prod kernels.\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p577
sg189
I0
sg272
I2
sbag0
(cGPy.likelihoods.gaussian
HeteroscedasticGaussian
p578
g5
Ntp579
Rp580
(dp581
g52
g53
((lp582
tp583
Rp584
sg129
Nsg189
I1
sg133
I01
sg66
g0
(g67
g70
(lp585
g17
(g116
(I0
tp586
g20
tp587
Rp588
((I1
(I21
I1
tp589
g27
I00
S'Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?Z\xa2\x9a\x1d\xbe\x95\xd0?'
p590
tp591
(dp592
g52
g53
((lp593
tp594
Rp595
sg127
(I21
I1
tp596
sg129
g132
sg133
I01
sg66
g0
(g67
g70
(lp597
tp598
Rp599
sg137
I01
sg62
g200
sg188
Nsg186
g580
sg187
I00
sg189
I0
sg190
I00
sg191
(g194
(NI21
Ntp600
Rp601
tp602
sg198
I2
sg199
I21
sg138
g139
((lp603
(lp604
g142
ag0
(g143
g5
Ntp605
Rp606
(lp607
g149
aI5
aI21
abaa(lp608
g175
ag0
(g143
g5
Ntp609
Rp610
(lp611
g180
aI5
aI21
abaatp612
Rp613
sg64
I00
sg201
g588
stp614
batp615
Rp616
sS'gp_link'
p617
g0
(cGPy.likelihoods.link_functions
Identity
p618
g5
Ntp619
Rp620
sg62
g55
sg267
S'Inherited from Gaussian: \n\n    Gaussian likelihood\n\n    .. math::\n        \\ln p(y_{i}|\\lambda(f_{i})) = -\\frac{N \\ln 2\\pi}{2} - \\frac{\\ln |K|}{2} - \\frac{(y_{i} - \\lambda(f_{i}))^{T}\\sigma^{-2}(y_{i} - \\lambda(f_{i}))}{2}\n\n    :param variance: variance value of the Gaussian distribution\n    :param N: Number of data points\n    :type N: int\n    \nInherited from Likelihood: \n\n    Likelihood base class, used to defing p(y|f).\n\n    All instances use _inverse_ link functions, which can be swapped out. It is\n    expected that inheriting classes define a default inverse link function\n\n    To use this class, inherit and define missing functionality.\n\n    Inheriting classes *must* implement:\n       pdf_link : a bound method which turns the output of the link function into the pdf\n       logpdf_link : the logarithm of the above\n\n    To enable use with EP, inheriting classes *must* define:\n       TODO: a suitable derivative function for any parameters of the class\n    It is also desirable to define:\n       moments_match_ep : a function to compute the EP moments If this isn\'t defined, the moments will be computed using 1D quadrature.\n\n    To enable use with Laplace approximation, inheriting classes *must* define:\n       Some derivative functions *AS TODO*\n\n    For exact Gaussian inference, define *JH TODO*\n\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p621
sg188
NsS'log_concave'
p622
I01
sg186
g50
sg187
I00
sg236
(lp623
g194
(I0
I21
Ntp624
Rp625
asg190
I00
sg200
g588
sg137
I01
sS'not_block_really'
p626
I00
sg138
g139
((lp627
(lp628
g142
ag0
(g143
g5
Ntp629
Rp630
(lp631
g149
aI5
aI21
abaa(lp632
g175
ag0
(g143
g5
Ntp633
Rp634
(lp635
g180
aI5
aI21
abaatp636
Rp637
sg64
I00
sg65
I21
sbatp638
Rp639
sS'output_dim'
p640
I1
sg55
g580
sg187
I00
sg236
(lp641
g194
(I0
I5
Ntp642
Rp643
ag194
(I5
I26
Ntp644
Rp645
asg190
I00
sS'Y_normalized'
p646
g17
(cparamz.core.observable_array
ObsAr
p647
(I0
tp648
g20
tp649
Rp650
((I1
(I21
I1
tp651
g27
I00
S'\x90\x1d\xeb\xaa\x10\x11\x03@\x90\x1d\xeb\xaa\x10\x11\x03@\x90\x1d\xeb\xaa\x10\x11\x03@\xdc6,\xf8|\xc1\x12@\xdc6,\xf8|\xc1\x12@\xdc6,\xf8|\xc1\x12@\xb2\xc13\xaa\x90a\xf0\xbf\xb2\xc13\xaa\x90a\xf0\xbf\xb2\xc13\xaa\x90a\xf0\xbf\xf49\x97\x8d\xae\xb7\x15@\xf49\x97\x8d\xae\xb7\x15@\xf49\x97\x8d\xae\xb7\x15@V \xfe\x9f\xab\x11 \xc0V \xfe\x9f\xab\x11 \xc0V \xfe\x9f\xab\x11 \xc0\x01S\xe7_\x0f\xdd\x13@\x01S\xe7_\x0f\xdd\x13@\x01S\xe7_\x0f\xdd\x13@\xfd\xb0\x86O0o\x12@\xfd\xb0\x86O0o\x12@\xfd\xb0\x86O0o\x12@'
p652
tp653
(dp654
g133
I01
stp655
bsS'optimization_runs'
p656
(lp657
sS'normalizer'
p658
NsS'num_data'
p659
I21
sg138
g139
((lp660
(lp661
g142
ag149
aa(lp662
g175
ag180
aatp663
Rp664
sS'posterior'
p665
g0
(cGPy.inference.latent_function_inference.posterior
PosteriorExact
p666
g5
Ntp667
Rp668
(dp669
S'_woodbury_vector'
p670
g17
(g18
(I0
tp671
g20
tp672
Rp673
(I1
(I21
I1
tp674
g27
I00
S'\xf9\x85\xbcY\xafw\xb6?\xc5\x85\xbcY\xafw\xb6?\xf3\x85\xbcY\xafw\xb6?\x1c<\xb0CX\x07\xc3?\x01=\xb0CX\x07\xc3?9<\xb0CX\x07\xc3?:\xbe\x96\x97\x12\xc8\xa4\xbf\x1c\xbe\x96\x97\x12\xc8\xa4\xbf=\xbe\x96\x97\x12\xc8\xa4\xbfq\xd2t;z\xd2\xc2?\x91\xd2t;z\xd2\xc2?s\xd2t;z\xd2\xc2?\xbd3\xb6\xe5\x1d\xc8\xd3\xbf\xbd3\xb6\xe5\x1d\xc8\xd3\xbf\xbd3\xb6\xe5\x1d\xc8\xd3\xbf.\xea\x95\xba\xae\x81\xb9?3\xed\x95\xba\xae\x81\xb9?_\xea\x95\xba\xae\x81\xb9?\xf8n\xb4\x11\xad\x14\xc2?\xe4o\xb4\x11\xad\x14\xc2?\x16o\xb4\x11\xad\x14\xc2?'
p675
tp676
bsS'_mean'
p677
NsS'_prior_mean'
p678
I0
sS'_woodbury_chol'
p679
g17
(g18
(I0
tp680
g20
tp681
Rp682
(I1
(I21
I21
tp683
g27
I01
S'i\xe8\xdd2\xcfd\x14@\xe6\x8f\x80\xcf\xb4\x9b\xfc\r\xc1\x88\x80\xcf\xb4\x9b\xfc\r\xdc\x85\xea\x03\x1dC8?\xd71\xd7\xdc\x11\xd6>\x1aQ\xc3tX\xd3\x94\t\x00\xe2\xaa\x8e\xe8\xe8m\xa7?\xa3\x1e\xd0sC\x9cW\x04gn\xc7\xf6\xafV\xc7\x16\xa3\xe8m\xc6r\xec->\x00\x00\x00\x00\x00\x00\x00\x00J\xf8n\x884\x1f\x9b\x1f\xa3\xe7\xce\xd7k\xffa3\xfaV\xcf\x82l\x9a\xba3\x00\x00\x00\x00\x00\x00\x00\x008\x0b\xee6#C\x92=\x00\x00\x00\x00\x00\x00\x00\x00\xa8\xfa\xa1\xfe|\xce\xe5!\x8b\xae\x9b3z\xc2\xc3?A\x06\x94\xb0,\r\x9c\x15\xf1\x88\x8b#\xbc\xf1\xbb\x05\x00\x00\x00\x00\x00\x00\x00\x00i\xe8\xdd2\xcfd\x14@\x00\x00\x00\x00\x00\x00\x00\x80VH\xfe\xb4r\x04!\x8d.\x89\xea\x03\x1dC8?\x00\x00\x00\x00\x00\x00\x00\x80<t\xc7\xf6\xafV\xc7\x16\xe2\xaa\x8e\xe8\xe8m\xa7?\x00\x00\x00\x00\x00\x00\x00\x80\xac\xfbn\x884\x1f\x9b\x1fM\xd4m\xc6r\xec->\x00\x00\x00\x00\x00\x00\x00\x80YX71@?I\x81C\xe4\xce\xd7k\xffa3\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xa2\xfe|\xce\xe5!\xa6\x08\xee6#C\x92=\x00\x00\x00\x00\x00\x00\x00\x80\x1fQ\x92\x03\xfd\xb7\xab\x8d7\xb1\x9b3z\xc2\xc3?\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00i\xe8\xdd2\xcfd\x14@\xd71\xd7\xdc\x11\xd6>\x1a\x00\x00\x00\x00\x00\x00\x00\x00\xb7\x86\xea\x03\x1dC8?\x94L\xact\xe8n\x90\x8d\x00\x00\x00\x00\x00\x00\x00\x00\xe2\xaa\x8e\xe8\xe8m\xa7?M#\xd3`\x01\xfd\x14\x8c\x00\x00\x00\x00\x00\x00\x00\x00\xc5\xe6m\xc6r\xec->MZ\xcf\x82l\x9a\xba3\xa6\x1d\xc8H\xcd\xa8\xa2\x81\xa3\xe7\xce\xd7k\xffa3]\xe2\x0c\x1a>\x9ey\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x01\x0c\xee6#C\x92=\xc0\x02\x94\xb0,\r\x9c\x15\x00\x00\x00\x00\x00\x00\x00\x00\xe6\xae\x9b3z\xc2\xc3?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\xfe\xf61\xcfd\x14@kf\xd8g\xb9Wb\x99\x10g\xd8g\xb9Wb\x996S\x8d/\x9b\xdf\xcb\xbe\xf0\x16\x05#\xe4\x8c\xb3\x0c\x1b\xf0z\xda\x1aS\xd4!e__\xa3\xc1\xccQ\xbdm!q\xb3-\xf88\x0b%\xe9\xe8\xbf\xa7\x8fO)\xe7\xe1\x17\x93\xa9\xf7 9\xb3\xbf\x18\x96@\xa6\xdf\xb2(\x7f3O\x9a6\x8b\x8dEu\x95\xb3\xef\xb9\xb5\xbc\x87F\xe2z<z\x9e\n\n\xdd\xe4QS\x1c8+\xa8\xcd\x9d$\xf7P\xf2?\'\xae\x12\x0b\xaa\xaf\xc0\x94\xa0\xa0c\x0c\x9e\xe0\xed\x99\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\xfe\xf61\xcfd\x14@\x00\x00\x00\x00\x00\x00\x00\x80\x90\xedz\xda\x1aS\xd4!\x07W\x8d/\x9b\xdf\xcb\xbe\x00\x00\x00\x00\x00\x00\x00\x00,\xe7\xe8\xbf\xa7\x8fO)\xbbU_\xa3\xc1\xccQ\xbd.\x85D_\nc\x9c\x02\xf0{\xb1\xea\x97\x85n\x12\xc2\xe3\x17\x93\xa9\xf7 9\x00\x00\x00\x00\x00\x00\x00\x80\x81\xd5\xe4QS\x1c8+/u\x95\xb3\xef\xb9\xb5\xbc\x06.)\x8d\x8a\xaf\x85\x04\xad\xc6\xa9\xb4\x7f\xdc\xed\x99\xb1\xc8\x9d$\xf7P\xf2?\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\xfe\xf61\xcfd\x14@\xeb"\xfa\x87\xf0\x11\x19\x98\x00\x00\x00\x00\x00\x00\x00\x002T\x8d/\x9b\xdf\xcb\xbe\x1b\x9c\xcflu\x02\xa0\x96\x00\x00\x00\x00\x00\x00\x00\x00\xe9^_\xa3\xc1\xccQ\xbd\xc5\xc4\x18\x96@\xa6\xdf\xb2\xd0\xd2ze]w,\x8c\xa3\xe1\x17\x93\xa9\xf7 9\x88\xd4v\xcf\x8a\x8a\x03\x96\x00\x00\x00\x00\x00\x00\x00\x00\xf7v\x95\xb3\xef\xb9\xb5\xbc4\xafe\xe7^y@\x19\x00\x00\x00\x00\x00\x00\x00\x00\x0b\xcd\x9d$\xf7P\xf2?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16$;]\x99d\x14@\x87/\xfe\xe0\xb1\xc7\x8b 4/\xfe\xe0\xb1\xc7\x8b \x03me\x0c\xdb\xfe\x8c?\x92\x07~\x9b|\xbd\x11\x1f4\x0f\xcf\x05\xb5\x91\x05(3\x89Ji\xfe0\xd77j\xf8\xe5.$\'\xe27\x9ak\xcf\xcc\xe0\xdb$\x11Ha\x8f\xcc\xe8R5?\xfc%\x90_L\xa7u\x1e\xf6W8\xa38z\xf0)v\xfa\x98\xda\xbc\xaeV\xbfo\xca=\xb2@A\xb2\xa1i\xd8\xfdAQh\xa4\x98\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16$;]\x99d\x14@>\xdc\xf5s\xe8\xeb\x02\x81\xcf\x10\xcf\x05\xb5\x91\x05(E]e\x0c\xdb\xfe\x8c?\x0b\xecH\x1d\xe0a}\x88I\xf5\xc3-\x98\x97O\x98\xe9\x8eJi\xfe0\xd77\x00\x00\x00\x00\x00\x00\x00\x80\x11U8\xa38z\xf0)\x9eX\x8f\xcc\xe8R5?#:\xd2\xe57rf\x8a\x1f\x9d\xcc\x9d\'\xe6\xce\x1f\x88\xfd\x98\xda\xbc\xaeV\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16$;]\x99d\x14@\x11\xbd\xec\xf4\xb4\xbf\x03\xa0.\xff\x03\x90\x12\xe7z\x00\xefne\x0c\xdb\xfe\x8c?<\xfd\xe5.$\'\xe27\xee\xfb[b\x82\xbaX\x98\xa7\x89Ji\xfe0\xd77\xea*\xae\xc6Q\x0c\xad\x9f\xeeNO\x11\x04\xc9#\x00\xd3_\x8f\xcc\xe8R5?\\\x05\x00\xb2@A\xb2\xa1\xb2\xab\xa8F\x14\xde(\x02\xdf\xfa\x98\xda\xbc\xaeV\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0H\xa7\x0b\xcad\x14@\xdb`\xfb\\{\xaa~\xa79o\xfb\\{\xaa~\xa7\x10\xbf\\)u|P\xb7\xb3\x84\xd3\xbe\xea\x08\x85;\xf84\xb0\xcfCu\xc6\x17\x89\xe3\xfb\x9f\x93Z\t@\x1d\\5=\x8b\x8d&\xa7\xd2\x18\x90\x87@mg\xa9\xf2E5\xa5\xdc\x1f\xd0>.>\x03\xcc\x9bX,\xa9\xd7\xda\x9d\xa5 \xf7E\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0H\xa7\x0b\xcad\x14@\'Y\xcc\xdf^\x0e\xe7\x8e\x17b/sI\xca\xb8\x9e,\xba\\)u|P\xb7U0L\x8aC\x00\x00\x00!\xe8i\x87@mg\xa9\x19\xe0\xfb\x9f\x93Z\t@\x86\xc5\xf1\xea\x05\x9d\xd1\x90\xf3\x10\xff\r\r?8&_?5\xa5\xdc\x1f\xd0>\xfa\x1ad\xfe\xbc\x83\xb0\x86\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0H\xa7\x0b\xcad\x14@\xbb\x82\xd3\xbe\xea\x08\x85;\x85\xcf\x08\xb9G\xa1\xef"z\xc0\\)u|P\xb7%\xa5OL\x81[r\'o\xbd\xf1\xf6\xa0\x9a\xdb\x0eR\xe3\xfb\x9f\x93Z\t@qG\x03\xcc\x9bX,\xa9O\rX7\xdeO\x95\x90NG5\xa5\xdc\x1f\xd0>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00i\xe8\xdd2\xcfd\x14@K\x12\xd1\xef\x1e\x01\xc12)\x12\xd1\xef\x1e\x01\xc12\xaf}\xd6@\xef\xbcC7\x87\x0e\xa2V\x14\xae\xad\x1e\xfee\x13`\xf1ZZ<\xba\xde#\xc9Xz\xfe\xb8\xdd\xcb\xd9*.\xeaf\xa0Y\xa1\xcfN\x9d\xa1@\xba\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00i\xe8\xdd2\xcfd\x14@\x82\xd0\xfd\xeeG[l\xa5\x94e\x13`\xf1ZZ<\xf3t\xd6@\xef\xbcC7V\xcdg\'\x9d\xf9\x05\xaf\x81\xa1\xcfN\x9d\xa1@\xba\xcd\xd9#\xc9Xz\xfe\xb8y@\x85\xa3\x03\xbc\xeb,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00i\xe8\xdd2\xcfd\x14@\x9eD\xdf\x82%u\xf0\xa9\xe0Z\xd4\xf9\xdbq\x9b\x1cN\x7f\xd6@\xef\xbcC7\xfa\xccF\x99\x9ci\xa9+\xd3\xe8b9d0U\x9e<\xdd#\xc9Xz\xfe\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h|!\x14;\xf3\x0f@+\xac\x17\xe3\x19H\x90\xb3\xa1\xb3\x17\xe3\x19H\x90\xb3\xf1\x8a\xb8Z\x0f\xa5\xc8\xbe%\xb7\x9b]\x0e$I5}\xee"\x9c\x81\x8ct1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00#\x7f!\x14;\xf3\x0f@m\x880;\xab\x97\x10\xa7v\\\xa9z\x7f\x1dI\xb20{\xb8Z\x0f\xa5\xc8\xbeQ\x1c\x9c~\xed\xf0\xf4$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x94|!\x14;\xf3\x0f@_\xbb\x9b]\x0e$I5t\xec\x90\x1d\xeb\x9e\xc9(\xcc\x8c\xb8Z\x0f\xa5\xc8\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00v\x80\xb96\x0c\xdd\x13@O\xad\x019x0\xff3\x05\xb5\x019x0\xff3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbe\x80\xb96\x0c\xdd\x13@\xaf\xcf\x1c\x1b\xfb<\xe8\xa7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x80\xb96\x0c\xdd\x13@'
p684
tp685
bsS'_K_chol'
p686
NsS'_K'
p687
g17
(g18
(I0
tp688
g20
tp689
Rp690
(I1
(I21
I21
tp691
g27
I00
S'\x07r\x00/*\xbc9@\x9d\x17l\xd3p;"\x0e\x0f\x13l\xd3p;"\x0e\xdb=\xa7\xeb\xc1\xec^?|~\xa0\xcb\xef\xa6c\x1a2\x1b\xbe\xd6\xccl(\x00G|\xd1z\x01\xdd\xcd?\x82m\x10\xb7\x16\x18~\x04j\xc7\xf6\xfbg\xbf\xed\x16\x172\xc8c\x0c\x12S>\x00\x00\x00\x00\x00\x00\x00\x00\x17_h\xf6\xf1H\xc1\x1f*u\x82A\xac\xf0\x863\xba\x11\x12\xa6R\xf4\xe03\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x8bg\x1f\xfcF\xb7=\x00\x00\x00\x00\x00\x00\x00\x00|\xc3F0\x81\xcb\x0b"\xfe\xed#\x1f\x98/\xe9?F\x85\xd4\xbb\x9a\xe0\xc1\x15\xf8\xcdJ\xf2\x1d\xcf\xe1\x05\x9d\x17l\xd3p;"\x0e\x07r\x00/*\xbc9@\x00\x00\x00\x00\x00\x00\x00\x00d$\xbe\xd6\xccl(\x00\x16B\xa7\xeb\xc1\xec^?\x00\x00\x00\x00\x00\x00\x00\x00\xd9\xce\xf6\xfbg\xbf\xed\x16G|\xd1z\x01\xdd\xcd?\x00\x00\x00\x00\x00\x00\x00\x00?ah\xf6\xf1H\xc1\x1f!%\xc8c\x0c\x12S>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xddp\x82A\xac\xf0\x863\x00\x00\x00\x00\x00\x00\x00\x00o\xcaF0\x81\xcb\x0b"\xd5\x87g\x1f\xfcF\xb7=\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xcdJ\xf2\x1d\xcf\xe1\x05e\xf1#\x1f\x98/\xe9?\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x13l\xd3p;"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x07r\x00/*\xbc9@|~\xa0\xcb\xef\xa6c\x1a\x00\x00\x00\x00\x00\x00\x00\x00\xf2>\xa7\xeb\xc1\xec^?\xfde\x10\xb7\x16\x18~\x04\x00\x00\x00\x00\x00\x00\x00\x00G|\xd1z\x01\xdd\xcd?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe60\xc8c\x0c\x12S>\xd8\x13\x12\xa6R\xf4\xe03\x00\x00\x00\x00\x00\x00\x00\x00*u\x82A\xac\xf0\x863\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x8cg\x1f\xfcF\xb7=\n\x83\xd4\xbb\x9a\xe0\xc1\x15\x00\x00\x00\x00\x00\x00\x00\x00r\xee#\x1f\x98/\xe9?\xdb=\xa7\xeb\xc1\xec^?d$\xbe\xd6\xccl(\x00|~\xa0\xcb\xef\xa6c\x1a\x07r\x00/*\xbc9@\x0f\x13l\xd3p;"\x0e\x0f\x13l\xd3p;"\x0e\x8c\x98\x10\xddJ\xfe\xbc=\x00\x00\x00\x00\x00\x00\x00\x00\x1b\xda\x92+\xf0\xe7\xf9!8\x80,\xde\x8e\xbd\xe8:\x00\x00\x00\x00\x00\x00\x00\x00\x05\xff\xb5\x1e6\x1dt)|s\xd3\x94{\xa0E9&|\x7f%\xc4\xd1\x81,\x00\x00\x00\x00\x00\x00\x00\x00\x9d\xa0\xfb\x08>\xb1\xec9\x00\x00\x00\x00\x00\x00\x00\x00\x19\xd0\xdehQ\xbb^+%\xfbf"\xabX\x17@\xe4O\xb8\xde\x86y\xd2\x084\ri\xd5\x92\x9d-\x13|~\xa0\xcb\xef\xa6c\x1a\x16B\xa7\xeb\xc1\xec^?\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x13l\xd3p;"\x0e\x07r\x00/*\xbc9@\x00\x00\x00\x00\x00\x00\x00\x00\xde\xd6\x92+\xf0\xe7\xf9!\x8c\x98\x10\xddJ\xfe\xbc=\x00\x00\x00\x00\x00\x00\x00\x00\xc3\xfd\xb5\x1e6\x1dt)\xe0x,\xde\x8e\xbd\xe8:\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd9u\xd3\x94{\xa0E9\x00\x00\x00\x00\x00\x00\x00\x00~\xc6\xdehQ\xbb^+\x82\x94\xfb\x08>\xb1\xec9\x00\x00\x00\x00\x00\x00\x00\x004\ri\xd5\x92\x9d-\x13\xd0\xf4f"\xabX\x17@\x00\x00\x00\x00\x00\x00\x00\x002\x1b\xbe\xd6\xccl(\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf2>\xa7\xeb\xc1\xec^?\x0f\x13l\xd3p;"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x07r\x00/*\xbc9@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x96\x10\xddJ\xfe\xbc=\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc5\x81,\xde\x8e\xbd\xe8:D}\x7f%\xc4\xd1\x81,\x00\x00\x00\x00\x00\x00\x00\x00%s\xd3\x94{\xa0E9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb7\x9f\xfb\x08>\xb1\xec9\xe4O\xb8\xde\x86y\xd2\x08\x00\x00\x00\x00\x00\x00\x00\x00\\\xfaf"\xabX\x17@G|\xd1z\x01\xdd\xcd?\xd9\xce\xf6\xfbg\xbf\xed\x16\xfde\x10\xb7\x16\x18~\x04\x8c\x98\x10\xddJ\xfe\xbc=\xde\xd6\x92+\xf0\xe7\xf9!\x00\x00\x00\x00\x00\x00\x00\x00\x07r\x00/*\xbc9@\x0f\x13l\xd3p;"\x0e\x0f\x13l\xd3p;"\x0e\\\xfd\xf6Kpz\xb2?\xe0R\xf8\x05f\xc6L\x03\xbd\xa2t\xcf\xaf\xd2\xe7\x17<\xbbx?\xcbCv.\xe3/\xd5\xdc\x0f#\x078\x00\x00\x00\x00\x00\x00\x00\x00\xc8\xf7\xd1\x93\xb5-[?[\xbf\x84\xb0\x16\x10\x10\x00\xba\xab9\x1e\xcb\x14w\x1a\x9a\x95\x1d\xdb\r,\xc2>mq|\xe2\xeb"\xd2\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x82m\x10\xb7\x16\x18~\x04G|\xd1z\x01\xdd\xcd?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8c\x98\x10\xddJ\xfe\xbc=\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x13l\xd3p;"\x0e\x07r\x00/*\xbc9@\x00\x00\x00\x00\x00\x00\x00\x00\xb8\xa5t\xcf\xaf\xd2\xe7\x17T\xf3\xf6Kpz\xb2?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00S\xbdx?\xcbCv.\x00\x00\x00\x00\x00\x00\x00\x00\x9d\xae9\x1e\xcb\x14w\x1a\xbd\xec\xd1\x93\xb5-[?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9a\x95\x1d\xdb\r,\xc2>\x00\x00\x00\x00\x00\x00\x00\x00j\xc7\xf6\xfbg\xbf\xed\x16\x00\x00\x00\x00\x00\x00\x00\x00G|\xd1z\x01\xdd\xcd?\x1b\xda\x92+\xf0\xe7\xf9!\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x96\x10\xddJ\xfe\xbc=\x0f\x13l\xd3p;"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x07r\x00/*\xbc9@\x12Z\xf8\x05f\xc6L\x03\x00\x00\x00\x00\x00\x00\x00\x00\x96\xfe\xf6Kpz\xb2?\x086\xd5\xdc\x0f#\x078\x00\x00\x00\x00\x00\x00\x00\x00<\xbbx?\xcbCv.f\xc7\x84\xb0\x16\x10\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\xf5\xd1\x93\xb5-[?\x06n|\xe2\xeb"\xd2\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x9a\x95\x1d\xdb\r,\xc2>\x172\xc8c\x0c\x12S>?ah\xf6\xf1H\xc1\x1f\x00\x00\x00\x00\x00\x00\x00\x008\x80,\xde\x8e\xbd\xe8:\xc3\xfd\xb5\x1e6\x1dt)\x00\x00\x00\x00\x00\x00\x00\x00\\\xfd\xf6Kpz\xb2?\xb8\xa5t\xcf\xaf\xd2\xe7\x17\x12Z\xf8\x05f\xc6L\x03\x07r\x00/*\xbc9@\x0f\x13l\xd3p;"\x0e\x0f\x13l\xd3p;"\x0e~\xb9\xce4\x03[\xcc\'&\xc7\x96\xc9\xa6\xcf\xaa;\x00\x00\x00\x00\x00\x00\x00\x00bo\x9a\xb3w(0@\xe1\xa6\xa6\xf0\xd5`1\x0b\x13\xda~\x9d\x7f)\xfe\x10\xcb\'\x13\r\x01<v<{\x13\x8a8\xf30\xd4%\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00!%\xc8c\x0c\x12S>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0x,\xde\x8e\xbd\xe8:\x00\x00\x00\x00\x00\x00\x00\x00\xe0R\xf8\x05f\xc6L\x03T\xf3\xf6Kpz\xb2?\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x13l\xd3p;"\x0e\x07r\x00/*\xbc9@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcf\xbe\xce4\x03[\xcc\'\x00\x00\x00\x00\x00\x00\x00\x00\x13\xda~\x9d\x7f)\xfe\x101m\x9a\xb3w(0@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x93*\x13\r\x01<v<\x00\x00\x00\x00\x00\x00\x00\x00\x17_h\xf6\xf1H\xc1\x1f\x00\x00\x00\x00\x00\x00\x00\x00\xe60\xc8c\x0c\x12S>\x05\xff\xb5\x1e6\x1dt)\x00\x00\x00\x00\x00\x00\x00\x00\xc5\x81,\xde\x8e\xbd\xe8:\xbd\xa2t\xcf\xaf\xd2\xe7\x17\x00\x00\x00\x00\x00\x00\x00\x00\x96\xfe\xf6Kpz\xb2?\x0f\x13l\xd3p;"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x07r\x00/*\xbc9@\xa3\xc4\x96\xc9\xa6\xcf\xaa;\x00\x00\x00\x00\x00\x00\x00\x00\t\xbd\xce4\x03[\xcc\'\x88\xa2\xa6\xf0\xd5`1\x0b\x00\x00\x00\x00\x00\x00\x00\x00?o\x9a\xb3w(0@{\x13\x8a8\xf30\xd4%\x00\x00\x00\x00\x00\x00\x00\x00$(\x13\r\x01<v<*u\x82A\xac\xf0\x863\x00\x00\x00\x00\x00\x00\x00\x00\xd8\x13\x12\xa6R\xf4\xe03|s\xd3\x94{\xa0E9\x00\x00\x00\x00\x00\x00\x00\x00D}\x7f%\xc4\xd1\x81,<\xbbx?\xcbCv.\x00\x00\x00\x00\x00\x00\x00\x00\x086\xd5\xdc\x0f#\x078~\xb9\xce4\x03[\xcc\'\x00\x00\x00\x00\x00\x00\x00\x00\xa3\xc4\x96\xc9\xa6\xcf\xaa;\x07r\x00/*\xbc9@\x80\x0el\xd3p;"\x0e\x9d\x17l\xd3p;"\x0eP\xc7\xff\xf2\x14\xf8\xba%\x00\x00\x00\x00\x00\x00\x00\x007\xac\x8c^ \xcc\x80<\x94}}\x86\x9f\x9157\x00\x00\x00\x00\x00\x00\x00\x00\xb0!h\xd8"\xd2\x9f/\xba\x11\x12\xa6R\xf4\xe03\xddp\x82A\xac\xf0\x863\x00\x00\x00\x00\x00\x00\x00\x00&|\x7f%\xc4\xd1\x81,\xd9u\xd3\x94{\xa0E9\x00\x00\x00\x00\x00\x00\x00\x00\xe3/\xd5\xdc\x0f#\x078S\xbdx?\xcbCv.\x00\x00\x00\x00\x00\x00\x00\x00&\xc7\x96\xc9\xa6\xcf\xaa;\xcf\xbe\xce4\x03[\xcc\'\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0el\xd3p;"\x0e\x07r\x00/*\xbc9@\x00\x00\x00\x00\x00\x00\x00\x00\xf3\xab\x8c^ \xcc\x80<P\xc7\xff\xf2\x14\xf8\xba%\x00\x00\x00\x00\x00\x00\x00\x00\xb7\x1ch\xd8"\xd2\x9f/9{}\x86\x9f\x9157\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*u\x82A\xac\xf0\x863\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%s\xd3\x94{\xa0E9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<\xbbx?\xcbCv.\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\xbd\xce4\x03[\xcc\'\x9d\x17l\xd3p;"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x07r\x00/*\xbc9@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\xc7\xff\xf2\x14\xf8\xba%\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00D\x7f}\x86\x9f\x9157\x1b\x8bg\x1f\xfcF\xb7=o\xcaF0\x81\xcb\x0b"\x00\x00\x00\x00\x00\x00\x00\x00\x9d\xa0\xfb\x08>\xb1\xec9~\xc6\xdehQ\xbb^+\x00\x00\x00\x00\x00\x00\x00\x00\xc8\xf7\xd1\x93\xb5-[?\x9d\xae9\x1e\xcb\x14w\x1af\xc7\x84\xb0\x16\x10\x10\x00bo\x9a\xb3w(0@\x13\xda~\x9d\x7f)\xfe\x10\x88\xa2\xa6\xf0\xd5`1\x0bP\xc7\xff\xf2\x14\xf8\xba%\xf3\xab\x8c^ \xcc\x80<\x00\x00\x00\x00\x00\x00\x00\x00\x07r\x00/*\xbc9@\x80\x0el\xd3p;"\x0e\x0f\x13l\xd3p;"\x0e\xcc\xbf~\xe0o\xfc\xa0;;\xb5,\x94TR\xe4\'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd5\x87g\x1f\xfcF\xb7=\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x82\x94\xfb\x08>\xb1\xec9\x00\x00\x00\x00\x00\x00\x00\x00[\xbf\x84\xb0\x16\x10\x10\x00\xbd\xec\xd1\x93\xb5-[?\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xa6\xa6\xf0\xd5`1\x0b1m\x9a\xb3w(0@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\xc7\xff\xf2\x14\xf8\xba%\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0el\xd3p;"\x0e\x07r\x00/*\xbc9@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\xbf~\xe0o\xfc\xa0;\x00\x00\x00\x00\x00\x00\x00\x00|\xc3F0\x81\xcb\x0b"\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x8cg\x1f\xfcF\xb7=\x19\xd0\xdehQ\xbb^+\x00\x00\x00\x00\x00\x00\x00\x00\xb7\x9f\xfb\x08>\xb1\xec9\xba\xab9\x1e\xcb\x14w\x1a\x00\x00\x00\x00\x00\x00\x00\x00\xec\xf5\xd1\x93\xb5-[?\x13\xda~\x9d\x7f)\xfe\x10\x00\x00\x00\x00\x00\x00\x00\x00?o\x9a\xb3w(0@7\xac\x8c^ \xcc\x80<\x00\x00\x00\x00\x00\x00\x00\x00P\xc7\xff\xf2\x14\xf8\xba%\x0f\x13l\xd3p;"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x07r\x00/*\xbc9@\xe1\xae,\x94TR\xe4\'\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xc1~\xe0o\xfc\xa0;\xfe\xed#\x1f\x98/\xe9?\xf8\xcdJ\xf2\x1d\xcf\xe1\x05\n\x83\xd4\xbb\x9a\xe0\xc1\x15%\xfbf"\xabX\x17@4\ri\xd5\x92\x9d-\x13\xe4O\xb8\xde\x86y\xd2\x08\x9a\x95\x1d\xdb\r,\xc2>\x00\x00\x00\x00\x00\x00\x00\x00\x06n|\xe2\xeb"\xd2\x1d\xcb\'\x13\r\x01<v<\x00\x00\x00\x00\x00\x00\x00\x00{\x13\x8a8\xf30\xd4%\x94}}\x86\x9f\x9157\xb7\x1ch\xd8"\xd2\x9f/\x00\x00\x00\x00\x00\x00\x00\x00\xcc\xbf~\xe0o\xfc\xa0;\x00\x00\x00\x00\x00\x00\x00\x00\xe1\xae,\x94TR\xe4\'\x07r\x00/*\xbc9@\x9d\x17l\xd3p;"\x0e\x0f\x13l\xd3p;"\x0eF\x85\xd4\xbb\x9a\xe0\xc1\x15e\xf1#\x1f\x98/\xe9?\x00\x00\x00\x00\x00\x00\x00\x00\xe4O\xb8\xde\x86y\xd2\x08\xd0\xf4f"\xabX\x17@\x00\x00\x00\x00\x00\x00\x00\x00mq|\xe2\xeb"\xd2\x1d\x9a\x95\x1d\xdb\r,\xc2>\x00\x00\x00\x00\x00\x00\x00\x00{\x13\x8a8\xf30\xd4%\x93*\x13\r\x01<v<\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x009{}\x86\x9f\x9157\x00\x00\x00\x00\x00\x00\x00\x00;\xb5,\x94TR\xe4\'\xcc\xbf~\xe0o\xfc\xa0;\x00\x00\x00\x00\x00\x00\x00\x00\x9d\x17l\xd3p;"\x0e\x07r\x00/*\xbc9@\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xcdJ\xf2\x1d\xcf\xe1\x05\x00\x00\x00\x00\x00\x00\x00\x00r\xee#\x1f\x98/\xe9?4\ri\xd5\x92\x9d-\x13\x00\x00\x00\x00\x00\x00\x00\x00\\\xfaf"\xabX\x17@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9a\x95\x1d\xdb\r,\xc2>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$(\x13\r\x01<v<\xb0!h\xd8"\xd2\x9f/\x00\x00\x00\x00\x00\x00\x00\x00D\x7f}\x86\x9f\x9157\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xc1~\xe0o\xfc\xa0;\x0f\x13l\xd3p;"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x07r\x00/*\xbc9@'
p692
tp693
bsS'_woodbury_inv'
p694
NsS'_covariance'
p695
NsS'_precision'
p696
NsbsS'inference_method'
p697
g0
(cGPy.inference.latent_function_inference.exact_gaussian_inference
ExactGaussianInference
p698
g5
Ntp699
Rp700
sS'obj_grads'
p701
NsS'Y'
p702
g650
sS'X'
p703
g17
(g647
(I0
tp704
g20
tp705
Rp706
((I1
(I21
I2
tp707
g27
I00
S'\xa1\x12\x19N\xe3\xed\xe5?\x00\x00\x00\x00\x00\x00\x00\x00P\x89\x0c\xa7\xf1\xf6\xfa?\x00\x00\x00\x00\x00\x00\x00\x00\xbe\xda\xcdc9$\xd4\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xfa\x11#z\x7f\xbd\xe1?\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x88\x11\xbd\xbf\xde\xf8?\x00\x00\x00\x00\x00\x00\x00\x00\x0c\xdc\xb9\x0b\x01\x85\xdc\xbf\x00\x00\x00\x00\x00\x00\x00\x00a\xee\xael\xa2\xdf\xe8?\x00\x00\x00\x00\x00\x00\x00\x000wW6\xd1o\xfc?\x00\x00\x00\x00\x00\x00\x00\x00|FDMv\x81\xcc\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x9b\xbd\xfe(*\xec?\x00\x00\x00\x00\x00\x00\x00\x00\xc7\xcd^\x7f\x14\x15\xfe?\x00\x00\x00\x00\x00\x00\x00\x00\x90#\x13\n\xb8\xae\xbe\xbf\x00\x00\x00\x00\x00\x00\x00\x00F\x17]t\xd1E\xc7?\x00\x00\x00\x00\x00\x00\x00\x00\xe9\xa2\x8b.\xba\xe8\xf2?\x00\x00\x00\x00\x00\x00\x00\x00.\xba\xe8\xa2\x8b.\xea\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x18]t\xd1E\x17\xed?\x00\x00\x00\x00\x00\x00\x00\x00\x8c.\xba\xe8\xa2\x8b\xfe?\x00\x00\x00\x00\x00\x00\x00\x00@\x17]t\xd1E\xb7\xbf\x00\x00\x00\x00\x00\x00\x00\x00e\x93M6\xd9d\xe3?\x00\x00\x00\x00\x00\x00\x00\x00\xb2\xc9&\x9bl\xb2\xf9?\x00\x00\x00\x00\x00\x00\x00\x006\xd9d\x93M6\xd9\xbf\x00\x00\x00\x00\x00\x00\x00\x00'
p708
tp709
(dp710
g133
I01
stp711
bsS'likelihood'
p712
g580
sg129
Nsg133
I01
sg137
I01
sS'grad_dict'
p713
(dp714
S'dL_dm'
p715
g673
sS'dL_dthetaL'
p716
g17
(g18
(I0
tp717
g20
tp718
Rp719
(I1
(I21
I1
tp720
g27
I00
S'\x8e3\x8cw\x1e\x8c\x8f\xbf\xb43\x8cw\x1e\x8c\x8f\xbf\x923\x8cw\x1e\x8c\x8f\xbfV\x10\xd2W3\xdb\x82\xbf\x05\r\xd2W3\xdb\x82\xbf\xeb\x0f\xd2W3\xdb\x82\xbf\xb1\x85sV\xe5\xda\x92\xbf\xb4\x85sV\xe5\xda\x92\xbf\xb1\x85sV\xe5\xda\x92\xbf\x16V\xe3vw\x07\x95\xbftP\xe3vw\x07\x95\xbf\xbbU\xe3vw\x07\x95\xbf\x03H\xde\xbe\xbe7\x9d?\x03H\xde\xbe\xbe7\x9d?\x03H\xde\xbe\xbe7\x9d?\xf4.(\x85m\x04\x9b\xbfB((\x85m\x04\x9b\xbf\x89.(\x85m\x04\x9b\xbf\x9f\x17\xe8N\xc7\x17\x85\xbf`\x14\xe8N\xc7\x17\x85\xbf9\x17\xe8N\xc7\x17\x85\xbf'
p721
tp722
bsS'dL_dK'
p723
g17
(g18
(I0
tp724
g20
tp725
Rp726
(I1
(I21
I21
tp727
g27
I00
S'\x8e3\x8cw\x1e\x8c\x8f\xbf`\x01\x9f~\xa1\x8co?\xa0\x01\x9f~\xa1\x8co?H]\xa0\xf2m)z?\x9a7\x98\x88p\xb8z?\x816\x98\x88p\xb8z?\xb9\x93\xbfU\xacYZ\xbf\xd5\xd4\x8f[\x8d.]\xbf\x04\xd5\x8f[\x8d.]\xbf\x01\xb2\x89\xd6dmz?UO\x84\xc63nz?+O\x84\xc63nz?\x0e>\xf0E"\xc7\x8b\xbf\x0e>\xf0E"\xc7\x8b\xbf\x0e>\xf0E"\xc7\x8b\xbfk\xfe\xf5\xd2\x0b\xe9q?\xa4o\xc7&\x8e\xe8q?\xa8m\xc7&\x8e\xe8q?\xea\xe8\xd1Y \xe7{?\x89\xc6\x18\xe7\xadcy?g\xc5\x18\xe7\xadcy?`\x01\x9f~\xa1\x8co?\xb43\x8cw\x1e\x8c\x8f\xbfW\x01\x9f~\xa1\x8co?\x1a6\x98\x88p\xb8z?d^\xa0\xf2m)z?C6\x98\x88p\xb8z?\xbc\xd4\x8f[\x8d.]\xbfL\x93\xbfU\xacYZ\xbf\xc0\xd4\x8f[\x8d.]\xbf\xebN\x84\xc63nz?\xf2\xb1\x89\xd6dmz?\xedN\x84\xc63nz?\xce=\xf0E"\xc7\x8b\xbf\xce=\xf0E"\xc7\x8b\xbf\xce=\xf0E"\xc7\x8b\xbf\\m\xc7&\x8e\xe8q?`\x00\xf6\xd2\x0b\xe9q?~m\xc7&\x8e\xe8q?\x02\xc5\x18\xe7\xadcy?@\xea\xd1Y \xe7{?,\xc5\x18\xe7\xadcy?\xa0\x01\x9f~\xa1\x8co?W\x01\x9f~\xa1\x8co?\x923\x8cw\x1e\x8c\x8f\xbfQ6\x98\x88p\xb8z?\x927\x98\x88p\xb8z?m]\xa0\xf2m)z?\xf8\xd4\x8f[\x8d.]\xbf\xce\xd4\x8f[\x8d.]\xbf\xb6\x93\xbfU\xacYZ\xbf!O\x84\xc63nz?NO\x84\xc63nz?\xfc\xb1\x89\xd6dmz?\x06>\xf0E"\xc7\x8b\xbf\x06>\xf0E"\xc7\x8b\xbf\x06>\xf0E"\xc7\x8b\xbf\x80m\xc7&\x8e\xe8q?\x9fo\xc7&\x8e\xe8q?\x89\xfe\xf5\xd2\x0b\xe9q?6\xc5\x18\xe7\xadcy?\x82\xc6\x18\xe7\xadcy?\x16\xe9\xd1Y \xe7{?H]\xa0\xf2m)z?\x1a6\x98\x88p\xb8z?Q6\x98\x88p\xb8z?V\x10\xd2W3\xdb\x82\xbf\xb8\xb3\xe4\xfft\xa1\x86?\xcb\xb2\xe4\xfft\xa1\x86?\xda\xda\xbdB\x8f\xb4h\xbf+Jv@ \xb7h\xbfSJv@ \xb7h\xbfk&\xc7U\x94b\x86?\xfb\xb5U\x11\x95b\x86?\xd7\xb5U\x11\x95b\x86?]-1.\xb8\x86\x97\xbf]-1.\xb8\x86\x97\xbf]-1.\xb8\x86\x97\xbf\xa3\xe7\xfa\xd2\xb5U~?\x7f\xab,\xef\xb4U~?"\xa8,\xef\xb4U~?\xf8n\xe2Q\xb9\xd3\x8e?G\xa1\xf3N\xda\x80\x85?R\xa0\xf3N\xda\x80\x85?\x9a7\x98\x88p\xb8z?d^\xa0\xf2m)z?\x927\x98\x88p\xb8z?\xb8\xb3\xe4\xfft\xa1\x86?\x05\r\xd2W3\xdb\x82\xbf\xdb\xb3\xe4\xfft\xa1\x86?yKv@ \xb7h\xbf\xe0\xdb\xbdB\x8f\xb4h\xbf|Kv@ \xb7h\xbf\xe2\xb6U\x11\x95b\x86?\x9e\'\xc7U\x94b\x86?\xe4\xb6U\x11\x95b\x86?x.1.\xb8\x86\x97\xbfx.1.\xb8\x86\x97\xbfx.1.\xb8\x86\x97\xbfU\xa9,\xef\xb4U~?\xa7\xec\xfa\xd2\xb5U~?\x8f\xa9,\xef\xb4U~?1\xa1\xf3N\xda\x80\x85?In\xe2Q\xb9\xd3\x8e?U\xa1\xf3N\xda\x80\x85?\x816\x98\x88p\xb8z?C6\x98\x88p\xb8z?m]\xa0\xf2m)z?\xcb\xb2\xe4\xfft\xa1\x86?\xdb\xb3\xe4\xfft\xa1\x86?\xeb\x0f\xd2W3\xdb\x82\xbfuJv@ \xb7h\xbfQJv@ \xb7h\xbf\x03\xdb\xbdB\x8f\xb4h\xbf\xf7\xb5U\x11\x95b\x86?\x1d\xb6U\x11\x95b\x86?\x8f&\xc7U\x94b\x86?\x81-1.\xb8\x86\x97\xbf\x81-1.\xb8\x86\x97\xbf\x81-1.\xb8\x86\x97\xbf\x16\xa8,\xef\xb4U~?\xad\xab,\xef\xb4U~?\x0b\xe8\xfa\xd2\xb5U~?O\xa0\xf3N\xda\x80\x85?h\xa1\xf3N\xda\x80\x85?\xe4n\xe2Q\xb9\xd3\x8e?\xb9\x93\xbfU\xacYZ\xbf\xbc\xd4\x8f[\x8d.]\xbf\xf8\xd4\x8f[\x8d.]\xbf\xda\xda\xbdB\x8f\xb4h\xbfyKv@ \xb7h\xbfuJv@ \xb7h\xbf\xb1\x85sV\xe5\xda\x92\xbf\xad.\xdcK\xf4\xfdJ?\xd8.\xdcK\xf4\xfdJ?\xf4\x9a\xf8~\x80\xbeg\xbf\xf3tV\xa1urh\xbf\xcctV\xa1urh\xbf\x10\xc2g\xd1\x81\xb1y?\x10\xc2g\xd1\x81\xb1y?\x10\xc2g\xd1\x81\xb1y?)\xc9\xf1:\xd0\xfd`\xbfB>r\x8a\x86\x90`\xbfl<r\x8a\x86\x90`\xbf\xff\xf4s\xd0{\x87g\xbfc\t\x0f\xcc\xef{g\xbfX\x08\x0f\xcc\xef{g\xbf\xd5\xd4\x8f[\x8d.]\xbfL\x93\xbfU\xacYZ\xbf\xce\xd4\x8f[\x8d.]\xbf+Jv@ \xb7h\xbf\xe0\xdb\xbdB\x8f\xb4h\xbfQJv@ \xb7h\xbf\xad.\xdcK\xf4\xfdJ?\xb4\x85sV\xe5\xda\x92\xbf\xb1.\xdcK\xf4\xfdJ?\xa7tV\xa1urh\xbfz\x9b\xf8~\x80\xbeg\xbf\xa9tV\xa1urh\xbf\xeb\xc1g\xd1\x81\xb1y?\xeb\xc1g\xd1\x81\xb1y?\xeb\xc1g\xd1\x81\xb1y?5<r\x8a\x86\x90`\xbf\xaa\xca\xf1:\xd0\xfd`\xbfT<r\x8a\x86\x90`\xbf\x0f\x08\x0f\xcc\xef{g\xbf\x10\xf6s\xd0{\x87g\xbf6\x08\x0f\xcc\xef{g\xbf\x04\xd5\x8f[\x8d.]\xbf\xc0\xd4\x8f[\x8d.]\xbf\xb6\x93\xbfU\xacYZ\xbfSJv@ \xb7h\xbf|Kv@ \xb7h\xbf\x03\xdb\xbdB\x8f\xb4h\xbf\xd8.\xdcK\xf4\xfdJ?\xb1.\xdcK\xf4\xfdJ?\xb1\x85sV\xe5\xda\x92\xbf\xcdtV\xa1urh\xbf\xf7tV\xa1urh\xbf\xef\x9a\xf8~\x80\xbeg\xbf\x14\xc2g\xd1\x81\xb1y?\x14\xc2g\xd1\x81\xb1y?\x14\xc2g\xd1\x81\xb1y?O<r\x8a\x86\x90`\xbfE>r\x8a\x86\x90`\xbfR\xc9\xf1:\xd0\xfd`\xbf4\x08\x0f\xcc\xef{g\xbfg\t\x0f\xcc\xef{g\xbf)\xf5s\xd0{\x87g\xbf\x01\xb2\x89\xd6dmz?\xebN\x84\xc63nz?!O\x84\xc63nz?k&\xc7U\x94b\x86?\xe2\xb6U\x11\x95b\x86?\xf7\xb5U\x11\x95b\x86?\xf4\x9a\xf8~\x80\xbeg\xbf\xa7tV\xa1urh\xbf\xcdtV\xa1urh\xbf\x16V\xe3vw\x07\x95\xbf\xca_\x05\xd2c$\x86?\xa7_\x05\xd2c$\x86?oF:J[E\x97\xbfoF:J[E\x97\xbfoF:J[E\x97\xbf$A\x91\xef|t\x9b?WY\xd6\x82m\x01~?\x03V\xd6\x82m\x01~?\x90o,\x80\x1fE\x85?\x04GK4\x1cE\x85?\x12FK4\x1cE\x85?UO\x84\xc63nz?\xf2\xb1\x89\xd6dmz?NO\x84\xc63nz?\xfb\xb5U\x11\x95b\x86?\x9e\'\xc7U\x94b\x86?\x1d\xb6U\x11\x95b\x86?\xf3tV\xa1urh\xbfz\x9b\xf8~\x80\xbeg\xbf\xf7tV\xa1urh\xbf\xca_\x05\xd2c$\x86?tP\xe3vw\x07\x95\xbf\xcd_\x05\xd2c$\x86?\x97F:J[E\x97\xbf\x97F:J[E\x97\xbf\x97F:J[E\x97\xbf\xfdU\xd6\x82m\x01~?\xf4;\x91\xef|t\x9b?6V\xd6\x82m\x01~?\x13FK4\x1cE\x85?\xcap,\x80\x1fE\x85?6FK4\x1cE\x85?+O\x84\xc63nz?\xedN\x84\xc63nz?\xfc\xb1\x89\xd6dmz?\xd7\xb5U\x11\x95b\x86?\xe4\xb6U\x11\x95b\x86?\x8f&\xc7U\x94b\x86?\xcctV\xa1urh\xbf\xa9tV\xa1urh\xbf\xef\x9a\xf8~\x80\xbeg\xbf\xa7_\x05\xd2c$\x86?\xcd_\x05\xd2c$\x86?\xbbU\xe3vw\x07\x95\xbfrF:J[E\x97\xbfrF:J[E\x97\xbfrF:J[E\x97\xbf\xcdU\xd6\x82m\x01~?ZY\xd6\x82m\x01~?\xd0@\x91\xef|t\x9b?\xf1EK4\x1cE\x85?\x06GK4\x1cE\x85?\xb6o,\x80\x1fE\x85?\x0e>\xf0E"\xc7\x8b\xbf\xce=\xf0E"\xc7\x8b\xbf\x06>\xf0E"\xc7\x8b\xbf]-1.\xb8\x86\x97\xbfx.1.\xb8\x86\x97\xbf\x81-1.\xb8\x86\x97\xbf\x10\xc2g\xd1\x81\xb1y?\xeb\xc1g\xd1\x81\xb1y?\x14\xc2g\xd1\x81\xb1y?oF:J[E\x97\xbf\x97F:J[E\x97\xbfrF:J[E\x97\xbf\x03H\xde\xbe\xbe7\x9d?\x85c7\xed\ru\xa8?\x85c7\xed\ru\xa8?\xa2\x94\xed.\x04\x89\x8f\xbf^\x98\xed.\x04\x89\x8f\xbf\xdf\x94\xed.\x04\x89\x8f\xbf\xfe\x15s\xc1\xb1Z\x96\xbf"\x17s\xc1\xb1Z\x96\xbf#\x16s\xc1\xb1Z\x96\xbf\x0e>\xf0E"\xc7\x8b\xbf\xce=\xf0E"\xc7\x8b\xbf\x06>\xf0E"\xc7\x8b\xbf]-1.\xb8\x86\x97\xbfx.1.\xb8\x86\x97\xbf\x81-1.\xb8\x86\x97\xbf\x10\xc2g\xd1\x81\xb1y?\xeb\xc1g\xd1\x81\xb1y?\x14\xc2g\xd1\x81\xb1y?oF:J[E\x97\xbf\x97F:J[E\x97\xbfrF:J[E\x97\xbf\x85c7\xed\ru\xa8?\x03H\xde\xbe\xbe7\x9d?\x85c7\xed\ru\xa8?\xa2\x94\xed.\x04\x89\x8f\xbf^\x98\xed.\x04\x89\x8f\xbf\xdf\x94\xed.\x04\x89\x8f\xbf\xfe\x15s\xc1\xb1Z\x96\xbf"\x17s\xc1\xb1Z\x96\xbf#\x16s\xc1\xb1Z\x96\xbf\x0e>\xf0E"\xc7\x8b\xbf\xce=\xf0E"\xc7\x8b\xbf\x06>\xf0E"\xc7\x8b\xbf]-1.\xb8\x86\x97\xbfx.1.\xb8\x86\x97\xbf\x81-1.\xb8\x86\x97\xbf\x10\xc2g\xd1\x81\xb1y?\xeb\xc1g\xd1\x81\xb1y?\x14\xc2g\xd1\x81\xb1y?oF:J[E\x97\xbf\x97F:J[E\x97\xbfrF:J[E\x97\xbf\x85c7\xed\ru\xa8?\x85c7\xed\ru\xa8?\x03H\xde\xbe\xbe7\x9d?\xa2\x94\xed.\x04\x89\x8f\xbf^\x98\xed.\x04\x89\x8f\xbf\xdf\x94\xed.\x04\x89\x8f\xbf\xfe\x15s\xc1\xb1Z\x96\xbf"\x17s\xc1\xb1Z\x96\xbf#\x16s\xc1\xb1Z\x96\xbfk\xfe\xf5\xd2\x0b\xe9q?\\m\xc7&\x8e\xe8q?\x80m\xc7&\x8e\xe8q?\xa3\xe7\xfa\xd2\xb5U~?U\xa9,\xef\xb4U~?\x16\xa8,\xef\xb4U~?)\xc9\xf1:\xd0\xfd`\xbf5<r\x8a\x86\x90`\xbfO<r\x8a\x86\x90`\xbf$A\x91\xef|t\x9b?\xfdU\xd6\x82m\x01~?\xcdU\xd6\x82m\x01~?\xa2\x94\xed.\x04\x89\x8f\xbf\xa2\x94\xed.\x04\x89\x8f\xbf\xa2\x94\xed.\x04\x89\x8f\xbf\xf4.(\x85m\x04\x9b\xbf^\xaa\x04\x90\xaeTt?\x1d\xa8\x04\x90\xaeTt?_\xc0\xc3\x91\xd6\xd2|?A\x93\xbc\x92\xda\xd2|?\xf8\x91\xbc\x92\xda\xd2|?\xa4o\xc7&\x8e\xe8q?`\x00\xf6\xd2\x0b\xe9q?\x9fo\xc7&\x8e\xe8q?\x7f\xab,\xef\xb4U~?\xa7\xec\xfa\xd2\xb5U~?\xad\xab,\xef\xb4U~?B>r\x8a\x86\x90`\xbf\xaa\xca\xf1:\xd0\xfd`\xbfE>r\x8a\x86\x90`\xbfWY\xd6\x82m\x01~?\xf4;\x91\xef|t\x9b?ZY\xd6\x82m\x01~?^\x98\xed.\x04\x89\x8f\xbf^\x98\xed.\x04\x89\x8f\xbf^\x98\xed.\x04\x89\x8f\xbf^\xaa\x04\x90\xaeTt?B((\x85m\x04\x9b\xbf\x85\xaa\x04\x90\xaeTt?2\x95\xbc\x92\xda\xd2|?A\xc5\xc3\x91\xd6\xd2|?b\x95\xbc\x92\xda\xd2|?\xa8m\xc7&\x8e\xe8q?~m\xc7&\x8e\xe8q?\x89\xfe\xf5\xd2\x0b\xe9q?"\xa8,\xef\xb4U~?\x8f\xa9,\xef\xb4U~?\x0b\xe8\xfa\xd2\xb5U~?l<r\x8a\x86\x90`\xbfT<r\x8a\x86\x90`\xbfR\xc9\xf1:\xd0\xfd`\xbf\x03V\xd6\x82m\x01~?6V\xd6\x82m\x01~?\xd0@\x91\xef|t\x9b?\xdf\x94\xed.\x04\x89\x8f\xbf\xdf\x94\xed.\x04\x89\x8f\xbf\xdf\x94\xed.\x04\x89\x8f\xbf\x1d\xa8\x04\x90\xaeTt?\x85\xaa\x04\x90\xaeTt?\x89.(\x85m\x04\x9b\xbf\x00\x92\xbc\x92\xda\xd2|?x\x93\xbc\x92\xda\xd2|?\xc6\xc0\xc3\x91\xd6\xd2|?\xea\xe8\xd1Y \xe7{?\x02\xc5\x18\xe7\xadcy?6\xc5\x18\xe7\xadcy?\xf8n\xe2Q\xb9\xd3\x8e?1\xa1\xf3N\xda\x80\x85?O\xa0\xf3N\xda\x80\x85?\xff\xf4s\xd0{\x87g\xbf\x0f\x08\x0f\xcc\xef{g\xbf4\x08\x0f\xcc\xef{g\xbf\x90o,\x80\x1fE\x85?\x13FK4\x1cE\x85?\xf1EK4\x1cE\x85?\xfe\x15s\xc1\xb1Z\x96\xbf\xfe\x15s\xc1\xb1Z\x96\xbf\xfe\x15s\xc1\xb1Z\x96\xbf_\xc0\xc3\x91\xd6\xd2|?2\x95\xbc\x92\xda\xd2|?\x00\x92\xbc\x92\xda\xd2|?\x9f\x17\xe8N\xc7\x17\x85\xbf\xc0L\xd2\x1f\xa0n\x84?\xd7K\xd2\x1f\xa0n\x84?\x89\xc6\x18\xe7\xadcy?@\xea\xd1Y \xe7{?\x82\xc6\x18\xe7\xadcy?G\xa1\xf3N\xda\x80\x85?In\xe2Q\xb9\xd3\x8e?h\xa1\xf3N\xda\x80\x85?c\t\x0f\xcc\xef{g\xbf\x10\xf6s\xd0{\x87g\xbfg\t\x0f\xcc\xef{g\xbf\x04GK4\x1cE\x85?\xcap,\x80\x1fE\x85?\x06GK4\x1cE\x85?"\x17s\xc1\xb1Z\x96\xbf"\x17s\xc1\xb1Z\x96\xbf"\x17s\xc1\xb1Z\x96\xbfA\x93\xbc\x92\xda\xd2|?A\xc5\xc3\x91\xd6\xd2|?x\x93\xbc\x92\xda\xd2|?\xc0L\xd2\x1f\xa0n\x84?`\x14\xe8N\xc7\x17\x85\xbf\xe1L\xd2\x1f\xa0n\x84?g\xc5\x18\xe7\xadcy?,\xc5\x18\xe7\xadcy?\x16\xe9\xd1Y \xe7{?R\xa0\xf3N\xda\x80\x85?U\xa1\xf3N\xda\x80\x85?\xe4n\xe2Q\xb9\xd3\x8e?X\x08\x0f\xcc\xef{g\xbf6\x08\x0f\xcc\xef{g\xbf)\xf5s\xd0{\x87g\xbf\x12FK4\x1cE\x85?6FK4\x1cE\x85?\xb6o,\x80\x1fE\x85?#\x16s\xc1\xb1Z\x96\xbf#\x16s\xc1\xb1Z\x96\xbf#\x16s\xc1\xb1Z\x96\xbf\xf8\x91\xbc\x92\xda\xd2|?b\x95\xbc\x92\xda\xd2|?\xc6\xc0\xc3\x91\xd6\xd2|?\xd7K\xd2\x1f\xa0n\x84?\xe1L\xd2\x1f\xa0n\x84?9\x17\xe8N\xc7\x17\x85\xbf'
p728
tp729
bssg267
S'\n    Gaussian Process model for heteroscedastic regression\n\n    This is a thin wrapper around the models.GP class, with a set of sensible defaults\n\n    :param X: input observations\n    :param Y: observed values\n    :param kernel: a GPy kernel, defaults to rbf\n\n    NB: This model does not make inference on the noise outside the training set\n    Inherited from GP: \n\n    General purpose Gaussian process model\n\n    :param X: input observations\n    :param Y: output observations\n    :param kernel: a GPy kernel, defaults to rbf+white\n    :param likelihood: a GPy likelihood\n    :param inference_method: The :class:`~GPy.inference.latent_function_inference.LatentFunctionInference` inference method to use for this GP\n    :rtype: model object\n    :param Norm normalizer:\n        normalize the outputs Y.\n        Prediction will be un-normalized using this normalizer.\n        If normalizer is None, we will normalize using Standardize.\n        If normalizer is False, no normalization will be done.\n\n    .. Note:: Multiple independent outputs are allowed using columns of Y\n\n\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p730
sS'kern'
p731
g74
sg272
I2
sg56
g74
sS'_log_marginal_likelihood'
p732
g40
(g27
S'\t\x9f\x0c\n\xd7`N\xc0'
p733
tp734
Rp735
sS'Y_metadata'
p736
(dp737
S'output_index'
p738
g17
(g18
(I0
tp739
g20
tp740
Rp741
(I1
(I21
I1
tp742
g162
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00'
p743
tp744
bssS'preferred_optimizer'
p745
S'lbfgsb'
p746
sg188
NsbsS'n_samples_y'
p747
I30
sS'base_measure'
p748
g17
(g18
(I0
tp749
g20
tp750
Rp751
(I1
(I40
tp752
g27
I00
S'\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?\x9a\x99\x99\x99\x99\x99\x99?'
p753
tp754
bsS'n_candidates'
p755
I40
sbsS'rng'
p756
cnumpy.random
__RandomState_ctor
p757
(tRp758
(S'MT19937'
p759
g17
(g18
(I0
tp760
g20
tp761
Rp762
(I1
(I624
tp763
g24
(S'u4'
p764
I0
I1
tp765
Rp766
(I3
S'<'
p767
NNNI-1
I-1
I0
tp768
bI00
S'\x00\x00\x00\x00\x01\x00\x00\x00g\x89\x07lA\xcbJqDp\x07H>8\xe7\x93\xb2K\xf5\xf0\xdc\x95\x1f\x14\xd4\xdb\xac\xc0\xdc\xca\xb9<\xd6\xc4\xe0\xbe\xaf\x1b\xcfi\xb2\tH\xbe}\x02k#_\xe0\xf7\n\x8a\\w1\x82\\c$[\x11C\xe7\xca\xef%\xbb\xfb\xa1\xc1\x11\x1b;\xf1\xf2\x8d(t\xaf\x81\x87q\xd2a\x08\xddT\xf8\xadO\x7fV\xe4X\xac>\t\x8f?\x91\xd3\x12\x08Q\x11\x9d7\x12.s\xa4n\xbc\x87\x87\xbb"W\xd3\xb8*\xfd\x95\x83e\xd5Kl\x9e\x11\xbd\x89_\xbe\xc2\x96\x8b\x02\x8b\x89E\xbfu\xce6d\x17m\xdd\x7fC\xc4\'\xe5\xacG\xa7\x1bw\xc8tW\xe5B\xb7\x8e\x1e6\x9f.I\xe0?\x1aa\xf3\x9c\xb1\x06\x0e\xf7\xb5\x7f\x1b\x80j\xd9\xa9a9fzo~\x95\x8b2\xd1P\xa6\xcaZp\x18S\xd6\xe8\xdd<\xc58hHn\xd9o\xd50\xec\xd5\xffn\xb7\r\xff\x95x\xf7\x0b\xff\xe1\x80K\xb1\xea\xec\xe5\xf0\xcd\x89\x9e\xa0H\xe7S\xedQ\xfe/\xd2\xa7\xad\xca~Q\x1e\x020\x1c\x19\xe4\xe4\x86\xebq\x1dW\x97+\xfa\xf5\xaae\x11\x8e\x8f\x03\xdc\x03\xb3\xee\x9d\xb0\x1e\xe5\xe2e\x85\xfc\xfa\xf6)W\xd31yT%p\xa5\x8b6(ge\xc3{\x8d\x97$3\xf1?ec\x01\xaa\xb9eR\x12:$\xad\x1c\xf5v0\\\xc0s\xaa\x98\x91\xcd\x03\xac\xc2}!\xef\xe8W\xf8w\xbe`\x96\x96(m\xed8\xbb\x9b\xa6]\xde\x04\xda\xc8b\x83\x95\xd5\\Q\xc2w\xf8\x0e\xe9\x11l\xfe\xb2K\x9fk\x00\xa9@K\xc76\xfbU\x81\x92\xd6c\xe4L\x8e9YZ\x86&\x83F\xca\x1d\x16\xed\x1e2\x16P\xae\x16\x17_;\xb4\xb3\xc0\xe1V\xa5H\x0et m\xfe\x9a\xd7@\xb6\xa2w\x91l\\\xfd\x89\xe7R\xdcL\x15\xb4\x07"\x9c45,\x002\\\xce,c%0\xa8\xfbsU)\xa4\x0b/\x1f\xe5\x9f\xd6\xb0\xbei\xb1\xe9\xf8K\xb9\n\xd6\xe2\xa1Z\xa0\xdb\xbd\x82\xb1\x19\x08\x1d\xbd$\xa6\x87\xc2\xe1l\x80V\xdf\xd4\x0eU\x16\xca\xd6\xf8\xca\xf7u\x81j\xca\x9c[\xba\x1f\x1c\xba\x1c\xfc\x19\xf8\xc0\x0f\x06\xc3u\x93(\xe2\x15T&\xc16\xf3\xb8K<d\xa1\xb4\x00\xbb\x03\x88U\xda\x9a\x9d\xdf\xb3Q\xb9\xbe;\x88\xfd\x1f\xb7\xe2LeMCS\x04\r\xb4+%G\x1c\xa4\xf5\xf1LG\xd7\t\x83\xdc8U\xc1\xd4\xdc3\x80\x9f,Eh\x9c\xbd\xe9j\xce\x8e\xe6v3\x9f\xf4,%U\x9a\xfe}\xbf\xd7U\x9e-C}\n^\x96\x99\xfeO\x18\x9b\xfc\x9bBEcb\xb1-\x05Kn\xa2\xb0o\x94\x19m\tn\x8821;\xf5\xc0_\x1d\xcc\x13!n\xd8\xec\x11\xa6A\x9f\'\xb1K\x85B\xb1\xac\x8c\xea.\xbd\xc3\x983\x1d\x0c\xa4\xb3I\xf1\x90@\xc9\x00~\x89\xe3\x86\x9b\x9a\xbc\x0e\xd7\xf2b]\x1fU\xd8\xb7#\x1a\xb1\xddSo\xbat\x0e\xce^v\xa0S\x16f;(\xf7n\x99\xe9\x9f\x9d\xdf\x1dX\x8b\xea\r\xca.\x0c\xb8\x8f\xb0A\x1c\x95\x82+\x02\xc9ZOU\x9c*\xe9\xef}"\xacXr\xdc\xcb\xa4[ks\x1e\xde\x1f!\x8f\x12\xca-\xab\xd9\xe9\xea\'\xbe\xd5\xb2p\xc0zeB!\x03\xa0?juMD_\xd8\x8f\xb1E\x1f5\x95m\xd1\x19\xc5\x8f!\xa9$\xe2\x1dz\xe8u\x1c\xf0\x02D\'\x7f\x99\xf77\xeb\x86M\\#u/P<iV\x94I\xb4\x1b\xcd\x06\xbco\xe5\xce\xdb\xd6\x90R\xe4\xf821\xf7\x9f$-\xc0\xbc|5^\x83\n\xc3\x88\xb1be\xc7\x88\x87\x7f\xcb}\x93..\xf2\xce\x9fM}\x7f5.K"\xc9\x98\xd6b\xc9O\xe5c\xca\x82\xa2\xaf\xcb\xa1\x926\xfbx\xfc\x10\xec\x0e7\x03\x020)\xb4\xe7\xf0\xefn\xa6!\xdf\xca\x02\x94\x8c\xfaO\xee\xb1\x8cL:\xd5\xba\xb2\xbfuR\x8cm\xf0M\x8f\xaeV\xe5+\xcao\xb4\x1d\xb4i\xd6\xc7\x1e\xea\xbd\xab\x918+j\xfc\xf2r+\xda\xdfm\x87\x8d7\xd4\nzB\x03\xe9\x80\xcfj\x80\x042\x96CZ\xb3\xfd:\xdc\xce\x8a\x13\xdb\xfe\x1c{\x9aN\xd5U*\xf5\x11\x871\xb4M\xdd@B\xf9\x96f\xec9/\xc0Ds(q:\xee\xfa\xa9\xcb\x7f\x0bd.\xf3-\xc0\r\xe1,q\x87\xcf\x92\xcfJH\x07\x91\x9e?\xcc\xf7\\\xe0\xb5\x8c\xf4_\x0f\xd8\xb3\x83-3\xee\x98\x98Y\xa7\t\x06\xb2 \xf1\x08\xeaM\x9b\x02\xb1B\x96\x11\xd6\x08\xd0,\x18\x8a@\xd4\x9f\xa6\x02\xb8\x83\x11\x06\xadpn\xfe\xbc\x93\xa1\xf8r\x82\t.\x12z\xad\xe9\xceB;\x8a\x96\x87\xb4#I\xc5\xe2\xaf\xb3\xfa\x19\xc9\x8d\x188YZ\x9c\x18\xf4<Q\xd0K1\xb3TY\x11c\x9f\xb8\xa1Bl\xdc\r\xfd\xcc\x10E\xcc\xa6\xbb(\x98\x11\xd6\x1d\r\x8d,\x98\xb2u\xa7\xea\xe19\xe8\x16\xd3\x1a\x12\xd8\x0e&\x8d-\x87\xecm\x88\xe1\xdb4\xd5\xc3)\x117A\x1aV}\xa1\xbb\x95K\xaf\xeczc\xc35,A\x12{Rst\x12\xe7d\xe1\xa7y\x0e\xfb\x9d\x9c\xf2x\x01C\x16\xc4\xf3\x0b\xe6#\xb6\xcf\x92\xb7T\x03\xd4\x8f\xa7CD\xbd\xe7\'\x10\x11\x93\x9fW_\xa6\xb8\xc7\x1a\xfbY]\x87\xcf$\xf1-\xdc\x84 -\x1a\x05\xe2\xeeY\xc1\x08\xa9x\xdd\x9b\x95^6l\xfa\x9d\x8c\xac\xacZF\x88\xb6\xe9\xfc\x1fi\xb2|\x1f\x88v4\x85Lu\xee)\xe8\xe4y\x14\x01\xa5\xd0`\xbeOZ\x93\x06\xffn\xe9\xba\x1f\x0b=p\xea\xc6\xc7wA*\xd5\xc1^\xef\xc1\x00\xf8\xbaC\xa9\x95\xc5\x95\x07_\xac\xe9\xce\xae\xc5\xa9\xdd\x18\xebjo\x15\xd7\xc6&\xf3\xab\xae0\t\xb67A`\xa1E\x18RR1\xf8;\xc3\x18\xaf\xd9\xff\x06\x8aT\x9d\xf4\x98R\xc6\xd4\x893\xd55r\xfa*Lm`w\xc5U\xa4,\x1eE\x1f\x03<T%\x83\xddk\x81-\x99\xd4\xd3ea9\x80yJ\x04\xeb\x9f\xd39\xfbZF3\xcd\x83A\x9f@\xe7x(\x87\x04\xc70C\xd9\xc4"\xf7\xb1\x8f\xaf\x86\xf3\xae/\xe9\x04\x19\xefEp\xec-3b\xf6\xf4?_\xe9\xd5\x14\xb5.* \x95\xd40v\xc3LU\xa5g\xdb\xdd\xfb/\xe2\xbb\x15-\xa6\x13M\xe6\x96\x0eoA\x11\x92\xc0Y\xcf1\x945+o\xc8"x\xe0\xbe*\xda\xc8\xb6\xc6 `\x88A\x89\x97&c-\x92\tJ\xe284\xe4L\xdb1u\xe9\xbb"f\x11L\x9b\xe5\xa4\xa6x^\xa4\rK\x01@\'e<\xcd\xbd\xa9\x08o\x98%\xee+\xf0Z\xceX)~\x85\x13|]H\xac\x96\xc5\x909\x92Yb\xac\xa9\x1e\\\xd6\x87\xa1`i\xa8M\xfci-\xaal\xa0\x93H\x0f\xb9\xdf\x02h2\xbd\xe3P\xba\xf1~zcs\x8f\xc3}\xe6\xf6\x93\xb9\xe8;c7J53S\xb8>\xf41\x89\x91\xb7\xc1m<\x93\x92\xaa\xe9\xb1t\\g\xa73\xa2|\xab\xfb7OvI\xe1\x0b\x12u\xf4>om\x87\xd43\xab\xc4M\xdf\xf3\x7f\x84\xf8\\\xebM\xb4\xc3+E\xedn\x04\xf4\xd2\xb0\x15\x9f\xebO\\E4\xdc\xb3\xec\x97H\xc6\xb6/\x1b\xc40o\xf6I\xe5K(_\xcc\xdf\xad\x90\xbch\x93!\x85\xc0\x88Ol\xde\x90\xc6\x19\x88T{m\x83\xa9\xb0\x8c\x18i%\xab\x1a*\xf5in\xb5\xbe.\x1c(\x1cs\xb5R\x98\xa2\xadQ\xe9\xd8nR\xde\x9f\xf1\xb8\x10C"\\\x12p}v\x05\x963TOV\x91\xb5T\xdc\xfa\x96\xd3<\xfb\x928MQ\xc9\xfe\xc2\xf6}\xa1\xce\xe4\x82&dl|N\xb4\xad\x84g\x96SH\x06`h\x9d\x8d>\x89\x8c\xf8\xd0\x92\xd8\x0fXupc(gi\xb6=\xb4\x0c=\xe5C\xf7\x0cx\x9e\x80;\xffz\xbd\x84\x11*j\x85\x1dV\x11\xe8\xf8\x8fZ\xbc\xea]\xc3\x04\xe66\xcc=\xa1&Z\x8fCH\xc6C\xdc\xf9\x99+\x8ej\xd9\x8c\x93p\x1a+~Z\x8av\x95\xca\xf1\x16&\xf3_\x91\xec\x08a3\xba,,0\x9c\x9e\x0e\xa2\xa9\xe2\n\xe6\x00\x1f\xdc\x1d\xbc8\xb7\x856\xafU\x9f\x03R\x11\xd2\xfd\x16\xa3\xfb\x05\xd2\x0f\xe8dqv\ra\xfd\x1a\xee\xb0\xa1j\xc9\xe0\x1c\xc52_\xea\x12\x00%Ut4(i\x1fQ"\xcc\x03\xfe\xb5\xee\xf87\xbb\x84\x9b\xe1\xa7\x8eW\xe4%\xd7\x1f\x0bp\xd7\x08`\xea\x12%-\x14\xe4\xfc\')\x0ck\xa4\x86:7#\t\xc8\x85\xb9\xdd\xb5Esto\xd7\xdf|!\xd7`\xef\xdc\xa9\xa9\x0e[N\xd9+I2\x05\xc1\x9a\xf8\xbd=\xbe\xab\xbf\xdc\xc2R\x87@!eG\x1e\xf2J\xc3\xf1\xb5u\x95\xdb\xe0\x9c\x1f\xd8\x17\x9b\xf6r\xbem-\x82\xf3w\xcc\xadb\xa0\xd26P\x98D\xc0\xaa\xd6|\xc7\x1a\x83\xc8\\\x04\xc58~\x1f\xd0\xd4\x90\xa2\xf2Z\xc6\x0e\x93e\x8b\x8fO\xadP.F\xa9\xbc\x83\xf0-\xe0@2\x1b\x9f~=\x08\xb9\\\xcb]\x0c$7\xa6\x9f\x0b\xd4\x04q\xc5\xf5\xf9\x0e7\xcc\xbc_\xee\xcfFy\xc5\xa1\x1cP\xcf\x10\x00\\\xca\xa64\xdb\x16\xa6\x9d2\xccB\x81\xd8\x91j@V\xf0\x98\x9c^\t$"I\xbc+\xd1*c\xc0\x01\xfayT\xfc\xd9b\xb9\x0c]j\xc9~\x8c\xbbI\xab\xd5I\x9b\x1d\xee\x88\x91\x90\xf7\xce\xcf-\x08\xb0\x17\xc9W\x90\x80\x94\xd1H\x1d\xa2\xaf^E\xf3\xcf\x97=\xfc,\xc9\xb1\xb4n\x7f\xac{/\xb6\xe3\xeb\xad\x13\xcd\x8d\x0f\x0e \xa9\xa0;\xe0\xdb\xc4\xa0k\xb4\x84"ys\xd5\xb5\xcad`\x04\xf6\xdf}I\xb8\x8dE\xaf\xa8v_\xb7Y\xcd\xd0e\x00\x1e\xad\xa6\x13\xebi\x11\xc9\xeb\x1b\xff\xfd"\xb9A\xb8\xab\xa7FJ\xc3\x1bY\xe51\x84\xfe\r\xc8%\x8e;\xf7`\x19\x98\x1f-\x8e\x14\xe4\xec\x127\xb2\x10\xea\xd8$`\x17\x8d#\x8e\xce\\\x07\xfdo\x08\xafO\x07\x80XS\xb0\xa3\x7f\xcdnD\x0f\xcf\x85\xf9~\xc7\x8ccn\x86\xaa\xa2w\xc2(H\xe7,\xc4\xf6e\x8bd\xd3kQB;\xee\x90GD\tA\xc7f\xaa\x90\x9f\xd8\xbf\xfe7\x9dJ\x14\xcb\xbc\x00B\xad]\xfb\xa1\xda~|\xffx\x84\x17\xe5q\xe3v\x9bI\x95\xdb"\xd5\x9a\xea]\x07/\xfb\xcf\x8c/0\xb4\xb50\x19\x1ak'
p769
tp770
bI624
I0
F0.0
tp771
bsS'initial_random_samples'
p772
I10
sS'X_'
p773
g17
(g18
(I0
tp774
g20
tp775
Rp776
(I1
(I21
I2
tp777
g27
I00
S'\xa1\x12\x19N\xe3\xed\xe5?\x00\x00\x00\x00\x00\x00\x00\x00P\x89\x0c\xa7\xf1\xf6\xfa?\x00\x00\x00\x00\x00\x00\x00\x00\xbe\xda\xcdc9$\xd4\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xfa\x11#z\x7f\xbd\xe1?\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x88\x11\xbd\xbf\xde\xf8?\x00\x00\x00\x00\x00\x00\x00\x00\x0c\xdc\xb9\x0b\x01\x85\xdc\xbf\x00\x00\x00\x00\x00\x00\x00\x00a\xee\xael\xa2\xdf\xe8?\x00\x00\x00\x00\x00\x00\x00\x000wW6\xd1o\xfc?\x00\x00\x00\x00\x00\x00\x00\x00|FDMv\x81\xcc\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x9b\xbd\xfe(*\xec?\x00\x00\x00\x00\x00\x00\x00\x00\xc7\xcd^\x7f\x14\x15\xfe?\x00\x00\x00\x00\x00\x00\x00\x00\x90#\x13\n\xb8\xae\xbe\xbf\x00\x00\x00\x00\x00\x00\x00\x00F\x17]t\xd1E\xc7?\x00\x00\x00\x00\x00\x00\x00\x00\xe9\xa2\x8b.\xba\xe8\xf2?\x00\x00\x00\x00\x00\x00\x00\x00.\xba\xe8\xa2\x8b.\xea\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x18]t\xd1E\x17\xed?\x00\x00\x00\x00\x00\x00\x00\x00\x8c.\xba\xe8\xa2\x8b\xfe?\x00\x00\x00\x00\x00\x00\x00\x00@\x17]t\xd1E\xb7\xbf\x00\x00\x00\x00\x00\x00\x00\x00e\x93M6\xd9d\xe3?\x00\x00\x00\x00\x00\x00\x00\x00\xb2\xc9&\x9bl\xb2\xf9?\x00\x00\x00\x00\x00\x00\x00\x006\xd9d\x93M6\xd9\xbf\x00\x00\x00\x00\x00\x00\x00\x00'
p778
tp779
bsS'y_'
p780
g17
(g18
(I0
tp781
g20
tp782
Rp783
(I1
(I21
I1
tp784
g27
I00
S'\x90\x1d\xeb\xaa\x10\x11\x03@\x90\x1d\xeb\xaa\x10\x11\x03@\x90\x1d\xeb\xaa\x10\x11\x03@\xdc6,\xf8|\xc1\x12@\xdc6,\xf8|\xc1\x12@\xdc6,\xf8|\xc1\x12@\xb2\xc13\xaa\x90a\xf0\xbf\xb2\xc13\xaa\x90a\xf0\xbf\xb2\xc13\xaa\x90a\xf0\xbf\xf49\x97\x8d\xae\xb7\x15@\xf49\x97\x8d\xae\xb7\x15@\xf49\x97\x8d\xae\xb7\x15@V \xfe\x9f\xab\x11 \xc0V \xfe\x9f\xab\x11 \xc0V \xfe\x9f\xab\x11 \xc0\x01S\xe7_\x0f\xdd\x13@\x01S\xe7_\x0f\xdd\x13@\x01S\xe7_\x0f\xdd\x13@\xfd\xb0\x86O0o\x12@\xfd\xb0\x86O0o\x12@\xfd\xb0\x86O0o\x12@'
p785
tp786
bsg47
g50
sS'maxf'
p787
I1000
sS'rand_X_query'
p788
g17
(g18
(I0
tp789
g20
tp790
Rp791
(I1
(I2
tp792
g27
I00
S'\x1c\xc7q\x1c\xc7q\xbc?UUUUUU\xd5?'
p793
tp794
bsb.