ccopy_reg
_reconstructor
p0
(cbayesian_optimization
BayesianOptimizer
p1
cdill.dill
_load_type
p2
(S'ObjectType'
p3
tp4
Rp5
Ntp6
Rp7
(dp8
S'optimizer'
p9
S'direct'
p10
sS'acquisition_function'
p11
g0
(cacquisition_functions
EntropySearch
p12
g5
Ntp13
Rp14
(dp15
S'percent_points'
p16
cnumpy.core.multiarray
_reconstruct
p17
(cnumpy
ndarray
p18
(I0
tp19
S'b'
p20
tp21
Rp22
(I1
(I30
tp23
cnumpy
dtype
p24
(S'f8'
p25
I0
I1
tp26
Rp27
(I3
S'<'
p28
NNNI-1
I-1
I0
tp29
bI00
S'\x87\xddi\x94<\x06\x01\xc0\xbejg\tRQ\xfa\xbf"Q\'s\xbe \xf6\xbf\xbcr\x83\xd5\xad\x11\xf3\xbfl\xbb\x85-;\x95\xf0\xbf\xf8K\xe2\x124\xe3\xec\xbf]}\x16ao\x12\xe9\xbfI\x8aR\x87k\x95\xe5\xbfH\xa2N\n\xc0U\xe2\xbf\xdf\xd8\xce\x93\xd4\x87\xde\xbfO\xccl,\x17\xa9\xd8\xbf\xcf\xf7\xb3\xb3\xc0\xfd\xd2\xbf\xac\xe9\xb8OQ\xef\xca\xbf\xd0\x92\x8e\xc7\xab\x15\xc0\xbf\x01\x92\xe3&he\xa5\xbf\xed\x91\xe3&he\xa5?\xd5\x92\x8e\xc7\xab\x15\xc0?\xb1\xe9\xb8OQ\xef\xca?\xcf\xf7\xb3\xb3\xc0\xfd\xd2?O\xccl,\x17\xa9\xd8?\xdf\xd8\xce\x93\xd4\x87\xde?H\xa2N\n\xc0U\xe2?I\x8aR\x87k\x95\xe5?]}\x16ao\x12\xe9?\xf8K\xe2\x124\xe3\xec?l\xbb\x85-;\x95\xf0?\xb9r\x83\xd5\xad\x11\xf3?"Q\'s\xbe \xf6?\xbbjg\tRQ\xfa?\x85\xddi\x94<\x06\x01@'
p30
tp31
bsS'rng_seed'
p32
I0
sS'n_trial_points'
p33
I500
sS'n_gp_samples'
p34
I500
sS'model'
p35
g0
(cGPy.models.gp_heteroscedastic_regression
GPHeteroscedasticRegression
p36
g5
Ntp37
Rp38
(dp39
S'_added_names_'
p40
c__builtin__
set
p41
((lp42
S'het_Gauss'
p43
aS'sum'
p44
atp45
Rp46
sS'sampling_runs'
p47
(lp48
sS'mean_function'
p49
NsS'_name'
p50
S'gp'
p51
sS'_optimizer_copy_transformed'
p52
I00
sS'size'
p53
I8
sS'parameters'
p54
g0
(cparamz.core.lists_and_dicts
ArrayList
p55
g2
(S'ListType'
p56
tp57
Rp58
(lp59
g0
(cGPy.kern.src.add
Add
p60
g5
Ntp61
Rp62
(dp63
g40
g41
((lp64
S'mul'
p65
aS'sim'
p66
atp67
Rp68
sS'psicomp'
p69
g0
(cGPy.kern.src.psi_comp.gaussherm
PSICOMP_GH
p70
g5
Ntp71
Rp72
(dp73
S'locs'
p74
g17
(g18
(I0
tp75
g20
tp76
Rp77
(I1
(I11
tp78
g27
I00
S'/1\x99d\x83\xc0\x14\xc0 \xd8\t\xebD}\x0f\xc0\x1a\xd0\x0f\xb1\xc5\xeb\x06\xc0\xc5s\x1bL=\x04\xfe\xbf\xad\xa3\xc0yK\xb9\xed\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xad\xa3\xc0yK\xb9\xed?\xc5s\x1bL=\x04\xfe?\x1a\xd0\x0f\xb1\xc5\xeb\x06@ \xd8\t\xebD}\x0f@/1\x99d\x83\xc0\x14@'
p79
tp80
bsS'cache_K'
p81
I01
sS'weights'
p82
g17
(g18
(I0
tp83
g20
tp84
Rp85
(I1
(I11
tp86
g27
I00
S'B\x11\x1c\xa8\x9d@\xab>\x1c\x0b \x15\xa9\xa5)?\x12\x1d\xe7\xd4\xba\x86{?\xfe\xa6_\x07x\xee\xb0?\x00\xb0\xdd\xea\xba\x01\xcf?\x8a\x91^\x00c\xa4\xd7?\x00\xb0\xdd\xea\xba\x01\xcf?\xfe\xa6_\x07x\xee\xb0?\x12\x1d\xe7\xd4\xba\x86{?\x1c\x0b \x15\xa9\xa5)?B\x11\x1c\xa8\x9d@\xab>'
p87
tp88
bsS'degree'
p89
I11
sS'Xs'
p90
Nsbsg50
g44
sg52
I00
sg53
I5
sg54
g0
(g55
g58
(lp91
g0
(cGPy.kern.src.rbf
RBF
p92
g5
Ntp93
Rp94
(dp95
g40
g41
((lp96
tp97
Rp98
sg69
g0
(cGPy.kern.src.psi_comp
PSICOMP_RBF
p99
g5
Ntp100
Rp101
(dp102
g52
I00
sbsg50
g66
sg52
I00
sg53
I2
sg54
g0
(g55
g58
(lp103
g17
(cGPy.core.parameterization.param
Param
p104
(I0
tp105
g20
tp106
Rp107
((I1
(I1
tp108
g27
I00
S'a\xdbe\xfc\xae\xad%@'
p109
tp110
(dp111
g40
g41
((lp112
tp113
Rp114
sS'_realshape_'
p115
(I1
tp116
sS'_default_constraint_'
p117
g0
(cparamz.transformations
Logexp
p118
g5
Ntp119
Rp120
sS'_update_on'
p121
I01
sg54
g0
(g55
g58
(lp122
tp123
Rp124
sS'_model_initialized_'
p125
I01
sS'_index_operations'
p126
ccollections
OrderedDict
p127
((lp128
(lp129
S'constraints'
p130
ag0
(cparamz.core.index_operations
ParameterIndexOperationsView
p131
g5
Ntp132
Rp133
(lp134
g0
(cparamz.core.index_operations
ParameterIndexOperations
p135
g5
Ntp136
Rp137
(dp138
S'_properties'
p139
cparamz.core.lists_and_dicts
IntArrayDict
p140
(cparamz.core.lists_and_dicts
intarray_default_factory
p141
tp142
Rp143
g120
g17
(g18
(I0
tp144
g20
tp145
Rp146
(I1
(I8
tp147
g24
(S'i8'
p148
I0
I1
tp149
Rp150
(I3
S'<'
p151
NNNI-1
I-1
I0
tp152
bI00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00'
p153
tp154
bsS'fixed'
p155
g17
(g18
(I0
tp156
g20
tp157
Rp158
(I1
(I0
tp159
g150
I00
S''
p160
tp161
bssbaI0
aI1
abaa(lp162
S'priors'
p163
ag0
(g131
g5
Ntp164
Rp165
(lp166
g0
(g135
g5
Ntp167
Rp168
(dp169
g139
g140
(g141
tp170
Rp171
sbaI0
aI1
abaatp172
Rp173
sS'_parent_'
p174
g94
sS'_in_init_'
p175
I00
sS'_default_prior_'
p176
NsS'_parent_index_'
p177
I0
sS'_Parameterizable__visited'
p178
I00
sS'_current_slice_'
p179
(g2
(S'SliceType'
p180
tp181
Rp182
(NI1
Ntp183
Rp184
tp185
sS'_realndim_'
p186
I1
sS'_realsize_'
p187
I1
sg50
S'variance'
p188
sg52
I00
sS'_original_'
p189
g107
stp190
bag17
(g104
(I0
tp191
g20
tp192
Rp193
((I1
(I1
tp194
g27
I00
S'\xb8\x1e\x85\xebQ\xb8\x9e?'
p195
tp196
(dp197
g40
g41
((lp198
tp199
Rp200
sg115
(I1
tp201
sg117
g120
sg121
I01
sg54
g0
(g55
g58
(lp202
tp203
Rp204
sg125
I01
sg126
g127
((lp205
(lp206
g130
ag0
(g131
g5
Ntp207
Rp208
(lp209
g137
aI1
aI1
abaa(lp210
g163
ag0
(g131
g5
Ntp211
Rp212
(lp213
g168
aI1
aI1
abaatp214
Rp215
sg174
g94
sg175
I00
sg176
Nsg177
I1
sg178
I00
sg179
(g182
(NI1
Ntp216
Rp217
tp218
sg186
I1
sg187
I1
sg50
S'lengthscale'
p219
sg52
I00
sg189
g193
stp220
batp221
Rp222
sS'useGPU'
p223
I00
sg174
g62
sg175
I00
sS'_param_slices_'
p224
(lp225
g182
(I0
I1
Ntp226
Rp227
ag182
(I1
I2
Ntp228
Rp229
asg178
I00
sg176
NsS'_all_dims_active'
p230
g17
(g18
(I0
tp231
g20
tp232
Rp233
(I1
(I1
tp234
g150
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p235
tp236
bsS'active_dims'
p237
g17
(g18
(I0
tp238
g20
tp239
Rp240
(I1
(I1
tp241
g150
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p242
tp243
bsg126
g127
((lp244
(lp245
g130
ag0
(g131
g5
Ntp246
Rp247
(lp248
g137
aI0
aI2
abaa(lp249
g163
ag0
(g131
g5
Ntp250
Rp251
(lp252
g168
aI0
aI2
abaatp253
Rp254
sS'__doc__'
p255
S'\n    Radial Basis Function kernel, aka squared-exponential, exponentiated quadratic or Gaussian kernel:\n\n    .. math::\n\n       k(r) = \\sigma^2 \\exp \\bigg(- \\frac{1}{2} r^2 \\bigg)\n\n    Inherited from Stationary: \n\n    Stationary kernels (covariance functions).\n\n    Stationary covariance fucntion depend only on r, where r is defined as\n\n    .. math::\n        r(x, x\') = \\sqrt{ \\sum_{q=1}^Q (x_q - x\'_q)^2 }\n\n    The covariance function k(x, x\' can then be written k(r).\n\n    In this implementation, r is scaled by the lengthscales parameter(s):\n\n    .. math::\n\n        r(x, x\') = \\sqrt{ \\sum_{q=1}^Q \\frac{(x_q - x\'_q)^2}{\\ell_q^2} }.\n\n    By default, there\'s only one lengthscale: seaprate lengthscales for each\n    dimension can be enables by setting ARD=True.\n\n    To implement a stationary covariance function using this class, one need\n    only define the covariance function k(r), and it derivative.\n\n    ```\n    def K_of_r(self, r):\n        return foo\n    def dK_dr(self, r):\n        return bar\n    ```\n\n    The lengthscale(s) and variance parameters are added to the structure automatically.\n\n    Thanks to @strongh:\n    In Stationary, a covariance function is defined in GPy as stationary when it depends only on the l2-norm |x_1 - x_2 |.\n    However this is the typical definition of isotropy, while stationarity is usually a bit more relaxed.\n    The more common version of stationarity is that the covariance is a function of x_1 - x_2 (See e.g. R&W first paragraph of section 4.1).\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p256
sg117
Nsg121
I01
sg125
I01
sS'_sliced_X'
p257
I0
sS'use_invLengthscale'
p258
I00
sS'ARD'
p259
I00
sg177
I0
sS'input_dim'
p260
I1
sg219
g193
sg188
g107
sbag0
(cGPy.kern.src.prod
Prod
p261
g5
Ntp262
Rp263
(dp264
g40
g41
((lp265
S'delta'
p266
aS'error'
p267
atp268
Rp269
sg69
g0
(g70
g5
Ntp270
Rp271
(dp272
g89
I11
sg74
g17
(g18
(I0
tp273
g20
tp274
Rp275
(I1
(I11
tp276
g27
I00
S'/1\x99d\x83\xc0\x14\xc0 \xd8\t\xebD}\x0f\xc0\x1a\xd0\x0f\xb1\xc5\xeb\x06\xc0\xc5s\x1bL=\x04\xfe\xbf\xad\xa3\xc0yK\xb9\xed\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xad\xa3\xc0yK\xb9\xed?\xc5s\x1bL=\x04\xfe?\x1a\xd0\x0f\xb1\xc5\xeb\x06@ \xd8\t\xebD}\x0f@/1\x99d\x83\xc0\x14@'
p277
tp278
bsg81
I01
sg82
g17
(g18
(I0
tp279
g20
tp280
Rp281
(I1
(I11
tp282
g27
I00
S'B\x11\x1c\xa8\x9d@\xab>\x1c\x0b \x15\xa9\xa5)?\x12\x1d\xe7\xd4\xba\x86{?\xfe\xa6_\x07x\xee\xb0?\x00\xb0\xdd\xea\xba\x01\xcf?\x8a\x91^\x00c\xa4\xd7?\x00\xb0\xdd\xea\xba\x01\xcf?\xfe\xa6_\x07x\xee\xb0?\x12\x1d\xe7\xd4\xba\x86{?\x1c\x0b \x15\xa9\xa5)?B\x11\x1c\xa8\x9d@\xab>'
p283
tp284
bsg90
Nsg52
I00
sbsg52
I00
sg53
I3
sg54
g0
(g55
g58
(lp285
g0
(cGPy.kern.src.basis_funcs
DomainKernel
p286
g5
Ntp287
Rp288
(dp289
g40
g41
((lp290
tp291
Rp292
sg69
g0
(g70
g5
Ntp293
Rp294
(dp295
g89
I11
sg74
g17
(g18
(I0
tp296
g20
tp297
Rp298
(I1
(I11
tp299
g27
I00
S'/1\x99d\x83\xc0\x14\xc0 \xd8\t\xebD}\x0f\xc0\x1a\xd0\x0f\xb1\xc5\xeb\x06\xc0\xc5s\x1bL=\x04\xfe\xbf\xad\xa3\xc0yK\xb9\xed\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xad\xa3\xc0yK\xb9\xed?\xc5s\x1bL=\x04\xfe?\x1a\xd0\x0f\xb1\xc5\xeb\x06@ \xd8\t\xebD}\x0f@/1\x99d\x83\xc0\x14@'
p300
tp301
bsg81
I01
sg82
g17
(g18
(I0
tp302
g20
tp303
Rp304
(I1
(I11
tp305
g27
I00
S'B\x11\x1c\xa8\x9d@\xab>\x1c\x0b \x15\xa9\xa5)?\x12\x1d\xe7\xd4\xba\x86{?\xfe\xa6_\x07x\xee\xb0?\x00\xb0\xdd\xea\xba\x01\xcf?\x8a\x91^\x00c\xa4\xd7?\x00\xb0\xdd\xea\xba\x01\xcf?\xfe\xa6_\x07x\xee\xb0?\x12\x1d\xe7\xd4\xba\x86{?\x1c\x0b \x15\xa9\xa5)?B\x11\x1c\xa8\x9d@\xab>'
p306
tp307
bsg90
Nsg52
I00
sbsg52
I00
sg53
I1
sg175
I00
sg54
g0
(g55
g58
(lp308
g17
(g104
(I0
tp309
g20
tp310
Rp311
((I1
(I1
tp312
g27
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p313
tp314
(dp315
g40
g41
((lp316
tp317
Rp318
sg115
(I1
tp319
sg117
g120
sg121
I01
sg54
g0
(g55
g58
(lp320
tp321
Rp322
sg125
I01
sg126
g127
((lp323
(lp324
g130
ag0
(g131
g5
Ntp325
Rp326
(lp327
g137
aI2
aI1
abaa(lp328
g163
ag0
(g131
g5
Ntp329
Rp330
(lp331
g168
aI2
aI1
abaatp332
Rp333
sg174
g288
sg175
I00
sg176
Nsg177
I0
sg178
I00
sg179
(g182
(NI1
Ntp334
Rp335
tp336
sg186
I1
sg187
I1
sg50
g188
sg52
I00
sg189
g311
stp337
batp338
Rp339
sg223
I00
sS'start'
p340
g17
(g18
(I0
tp341
g20
tp342
Rp343
(I1
(tg27
I00
S'\x00\x00\x00\x00\x00\x00\xe0?'
p344
tp345
bsg174
g263
sg177
I0
sg224
(lp346
g182
(I0
I1
Ntp347
Rp348
asg178
I00
sg176
Nsg230
g17
(g18
(I0
tp349
g20
tp350
Rp351
(I1
(I1
tp352
g150
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p353
tp354
bsg237
g17
(g18
(I0
tp355
g20
tp356
Rp357
(I1
(I1
tp358
g150
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p359
tp360
bsS'stop'
p361
g17
(g18
(I0
tp362
g20
tp363
Rp364
(I1
(tg27
I00
S'\x00\x00\x00\x00\x00\x00\xf8?'
p365
tp366
bsg126
g127
((lp367
(lp368
g130
ag0
(g131
g5
Ntp369
Rp370
(lp371
g137
aI2
aI1
abaa(lp372
g163
ag0
(g131
g5
Ntp373
Rp374
(lp375
g168
aI2
aI1
abaatp376
Rp377
sS'beta'
p378
g17
(g18
(I0
tp379
g20
tp380
Rp381
(I1
(I1
tp382
g27
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p383
tp384
bsg255
S'\n    Create a constant plateou of correlation between start and stop and zero\n    elsewhere. This is a constant shift of the outputs along the yaxis\n    in the range from start to stop.\n    Inherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p385
sS'alpha'
p386
g17
(g18
(I0
tp387
g20
tp388
Rp389
(I1
(I1
tp390
g27
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p391
tp392
bsg117
Nsg121
I01
sg125
I01
sg257
I0
sg50
g266
sg259
I00
sg260
I1
sg188
g311
sbag0
(g92
g5
Ntp393
Rp394
(dp395
g40
g41
((lp396
tp397
Rp398
sg69
g0
(g99
g5
Ntp399
Rp400
(dp401
g52
I00
sbsg50
g267
sg52
I00
sg53
I2
sg54
g0
(g55
g58
(lp402
g17
(g104
(I0
tp403
g20
tp404
Rp405
((I1
(I1
tp406
g27
I00
S'7\xc2F\x0eq\xcd\x1a@'
p407
tp408
(dp409
g40
g41
((lp410
tp411
Rp412
sg115
(I1
tp413
sg117
g120
sg121
I01
sg54
g0
(g55
g58
(lp414
tp415
Rp416
sg125
I01
sg126
g127
((lp417
(lp418
g130
ag0
(g131
g5
Ntp419
Rp420
(lp421
g137
aI3
aI1
abaa(lp422
g163
ag0
(g131
g5
Ntp423
Rp424
(lp425
g168
aI3
aI1
abaatp426
Rp427
sg174
g394
sg175
I00
sg176
Nsg177
I0
sg178
I00
sg179
(g182
(NI1
Ntp428
Rp429
tp430
sg186
I1
sg187
I1
sg50
g188
sg52
I00
sg189
g405
stp431
bag17
(g104
(I0
tp432
g20
tp433
Rp434
((I1
(I1
tp435
g27
I00
S'\xb8\x1e\x85\xebQ\xb8\x9e?'
p436
tp437
(dp438
g40
g41
((lp439
tp440
Rp441
sg115
(I1
tp442
sg117
g120
sg121
I01
sg54
g0
(g55
g58
(lp443
tp444
Rp445
sg125
I01
sg126
g127
((lp446
(lp447
g130
ag0
(g131
g5
Ntp448
Rp449
(lp450
g137
aI4
aI1
abaa(lp451
g163
ag0
(g131
g5
Ntp452
Rp453
(lp454
g168
aI4
aI1
abaatp455
Rp456
sg174
g394
sg175
I00
sg176
Nsg177
I1
sg178
I00
sg179
(g182
(NI1
Ntp457
Rp458
tp459
sg186
I1
sg187
I1
sg50
g219
sg52
I00
sg189
g434
stp460
batp461
Rp462
sg223
I00
sg174
g263
sg175
I00
sg224
(lp463
g182
(I0
I1
Ntp464
Rp465
ag182
(I1
I2
Ntp466
Rp467
asg178
I00
sg255
S'\n    Radial Basis Function kernel, aka squared-exponential, exponentiated quadratic or Gaussian kernel:\n\n    .. math::\n\n       k(r) = \\sigma^2 \\exp \\bigg(- \\frac{1}{2} r^2 \\bigg)\n\n    Inherited from Stationary: \n\n    Stationary kernels (covariance functions).\n\n    Stationary covariance fucntion depend only on r, where r is defined as\n\n    .. math::\n        r(x, x\') = \\sqrt{ \\sum_{q=1}^Q (x_q - x\'_q)^2 }\n\n    The covariance function k(x, x\' can then be written k(r).\n\n    In this implementation, r is scaled by the lengthscales parameter(s):\n\n    .. math::\n\n        r(x, x\') = \\sqrt{ \\sum_{q=1}^Q \\frac{(x_q - x\'_q)^2}{\\ell_q^2} }.\n\n    By default, there\'s only one lengthscale: seaprate lengthscales for each\n    dimension can be enables by setting ARD=True.\n\n    To implement a stationary covariance function using this class, one need\n    only define the covariance function k(r), and it derivative.\n\n    ```\n    def K_of_r(self, r):\n        return foo\n    def dK_dr(self, r):\n        return bar\n    ```\n\n    The lengthscale(s) and variance parameters are added to the structure automatically.\n\n    Thanks to @strongh:\n    In Stationary, a covariance function is defined in GPy as stationary when it depends only on the l2-norm |x_1 - x_2 |.\n    However this is the typical definition of isotropy, while stationarity is usually a bit more relaxed.\n    The more common version of stationarity is that the covariance is a function of x_1 - x_2 (See e.g. R&W first paragraph of section 4.1).\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p468
sg230
g17
(g18
(I0
tp469
g20
tp470
Rp471
(I1
(I1
tp472
g150
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p473
tp474
bsg237
g17
(g18
(I0
tp475
g20
tp476
Rp477
(I1
(I1
tp478
g150
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p479
tp480
bsg126
g127
((lp481
(lp482
g130
ag0
(g131
g5
Ntp483
Rp484
(lp485
g137
aI3
aI2
abaa(lp486
g163
ag0
(g131
g5
Ntp487
Rp488
(lp489
g168
aI3
aI2
abaatp490
Rp491
sg117
Nsg121
I01
sg125
I01
sg257
I0
sg258
I00
sg259
I00
sg177
I1
sg260
I1
sg219
g434
sg188
g405
sg176
Nsbatp492
Rp493
sg223
I00
sg174
g62
sg175
I00
sg224
(lp494
g182
(I0
I1
Ntp495
Rp496
ag182
(I1
I3
Ntp497
Rp498
asg178
I00
sS'extra_dims'
p499
g17
(g18
(I0
tp500
g20
tp501
Rp502
(I1
(I0
tp503
g150
I00
g160
tp504
bsg176
Nsg230
g17
(g18
(I0
tp505
g20
tp506
Rp507
(I1
(I2
tp508
g150
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
p509
tp510
bsg237
g17
(g18
(I0
tp511
g20
tp512
Rp513
(I1
(I2
tp514
g150
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
p515
tp516
bsg126
g127
((lp517
(lp518
g130
ag0
(g131
g5
Ntp519
Rp520
(lp521
g137
aI2
aI3
abaa(lp522
g163
ag0
(g131
g5
Ntp523
Rp524
(lp525
g168
aI2
aI3
abaatp526
Rp527
sg255
S'\n    Computes the product of 2 kernels\n\n    :param k1, k2: the kernels to multiply\n    :type k1, k2: Kern\n    :rtype: kernel object\n\n    Inherited from CombinationKernel: \n\n    Abstract super class for combination kernels.\n    A combination kernel combines (a list of) kernels and works on those.\n    Examples are the HierarchicalKernel or Add and Prod kernels.\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p528
sg266
g288
sg117
Nsg121
I01
sg125
I01
sg257
I0
sg50
g65
sg177
I1
sg260
I2
sg267
g394
sbatp529
Rp530
sg223
I00
sg174
g38
sg175
I00
sg224
(lp531
g182
(I0
I2
Ntp532
Rp533
ag182
(I2
I5
Ntp534
Rp535
asg178
I00
sg65
g263
sg499
g17
(g18
(I0
tp536
g20
tp537
Rp538
(I1
(I0
tp539
g150
I00
g160
tp540
bsg176
Nsg66
g94
sg230
g17
(g18
(I0
tp541
g20
tp542
Rp543
(I1
(I2
tp544
g150
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
p545
tp546
bsg237
g17
(g18
(I0
tp547
g20
tp548
Rp549
(I1
(I2
tp550
g150
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
p551
tp552
bsg126
g127
((lp553
(lp554
g130
ag0
(g131
g5
Ntp555
Rp556
(lp557
g137
aI0
aI5
abaa(lp558
g163
ag0
(g131
g5
Ntp559
Rp560
(lp561
g168
aI0
aI5
abaatp562
Rp563
sg117
Nsg121
I01
sg125
I01
sg257
I0
sS'_exact_psicomp'
p564
I00
sg255
S'\n    Add given list of kernels together.\n    propagates gradients through.\n\n    This kernel will take over the active dims of it\'s subkernels passed in.\n\n    NOTE: The subkernels will be copies of the original kernels, to prevent\n    unexpected behavior.\n    Inherited from CombinationKernel: \n\n    Abstract super class for combination kernels.\n    A combination kernel combines (a list of) kernels and works on those.\n    Examples are the HierarchicalKernel or Add and Prod kernels.\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p565
sg177
I0
sg260
I2
sbag0
(cGPy.likelihoods.gaussian
HeteroscedasticGaussian
p566
g5
Ntp567
Rp568
(dp569
g40
g41
((lp570
tp571
Rp572
sg117
Nsg177
I1
sg121
I01
sg54
g0
(g55
g58
(lp573
g17
(g104
(I0
tp574
g20
tp575
Rp576
((I1
(I3
I1
tp577
g27
I00
S'7\xc2F\x0eq\xcd\xba?7\xc2F\x0eq\xcd\xba?7\xc2F\x0eq\xcd\xba?'
p578
tp579
(dp580
g40
g41
((lp581
tp582
Rp583
sg115
(I3
I1
tp584
sg117
g120
sg121
I01
sg54
g0
(g55
g58
(lp585
tp586
Rp587
sg125
I01
sg50
g188
sg176
Nsg174
g568
sg175
I00
sg177
I0
sg178
I00
sg179
(g182
(NI3
Ntp588
Rp589
tp590
sg186
I2
sg187
I3
sg126
g127
((lp591
(lp592
g130
ag0
(g131
g5
Ntp593
Rp594
(lp595
g137
aI5
aI3
abaa(lp596
g163
ag0
(g131
g5
Ntp597
Rp598
(lp599
g168
aI5
aI3
abaatp600
Rp601
sg52
I00
sg189
g576
stp602
batp603
Rp604
sS'gp_link'
p605
g0
(cGPy.likelihoods.link_functions
Identity
p606
g5
Ntp607
Rp608
sg50
g43
sg255
S'Inherited from Gaussian: \n\n    Gaussian likelihood\n\n    .. math::\n        \\ln p(y_{i}|\\lambda(f_{i})) = -\\frac{N \\ln 2\\pi}{2} - \\frac{\\ln |K|}{2} - \\frac{(y_{i} - \\lambda(f_{i}))^{T}\\sigma^{-2}(y_{i} - \\lambda(f_{i}))}{2}\n\n    :param variance: variance value of the Gaussian distribution\n    :param N: Number of data points\n    :type N: int\n    \nInherited from Likelihood: \n\n    Likelihood base class, used to defing p(y|f).\n\n    All instances use _inverse_ link functions, which can be swapped out. It is\n    expected that inheriting classes define a default inverse link function\n\n    To use this class, inherit and define missing functionality.\n\n    Inheriting classes *must* implement:\n       pdf_link : a bound method which turns the output of the link function into the pdf\n       logpdf_link : the logarithm of the above\n\n    To enable use with EP, inheriting classes *must* define:\n       TODO: a suitable derivative function for any parameters of the class\n    It is also desirable to define:\n       moments_match_ep : a function to compute the EP moments If this isn\'t defined, the moments will be computed using 1D quadrature.\n\n    To enable use with Laplace approximation, inheriting classes *must* define:\n       Some derivative functions *AS TODO*\n\n    For exact Gaussian inference, define *JH TODO*\n\n    \nInherited from Parameterized: \n\n    Parameterized class\n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters:\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n        Fields:\n\n            Name:       The name of the param, can be renamed!\n            Value:      Shape or value, if one-valued\n            Constrain:  constraint of the param, curly "{c}" brackets indicate\n                        some parameters are constrained by c. See detailed print\n                        to get exact constraints.\n            Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters:\n\n        Set all values in param to one:\n\n            m.name.to.param = 1\n\n    Handling of constraining, fixing and tieing parameters:\n\n        You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n        Fixing parameters will fix them to the value they are right now. If you change\n        the parameters value, the param will be fixed to the new value!\n\n        If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n        and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p609
sg176
NsS'log_concave'
p610
I01
sg174
g38
sg175
I00
sg224
(lp611
g182
(I0
I3
Ntp612
Rp613
asg178
I00
sg188
g576
sg125
I01
sS'not_block_really'
p614
I00
sg126
g127
((lp615
(lp616
g130
ag0
(g131
g5
Ntp617
Rp618
(lp619
g137
aI5
aI3
abaa(lp620
g163
ag0
(g131
g5
Ntp621
Rp622
(lp623
g168
aI5
aI3
abaatp624
Rp625
sg52
I00
sg53
I3
sbatp626
Rp627
sS'output_dim'
p628
I1
sg43
g568
sg175
I00
sg224
(lp629
g182
(I0
I5
Ntp630
Rp631
ag182
(I5
I8
Ntp632
Rp633
asg178
I00
sS'Y_normalized'
p634
g17
(cparamz.core.observable_array
ObsAr
p635
(I0
tp636
g20
tp637
Rp638
((I1
(I3
I1
tp639
g27
I00
S'?P\xf8\x070\xd7\xf2\xbf?P\xf8\x070\xd7\xf2\xbf?P\xf8\x070\xd7\xf2\xbf'
p640
tp641
(dp642
g121
I01
stp643
bsS'optimization_runs'
p644
(lp645
sS'normalizer'
p646
NsS'num_data'
p647
I3
sg126
g127
((lp648
(lp649
g130
ag137
aa(lp650
g163
ag168
aatp651
Rp652
sS'posterior'
p653
g0
(cGPy.inference.latent_function_inference.posterior
PosteriorExact
p654
g5
Ntp655
Rp656
(dp657
S'_woodbury_vector'
p658
g17
(g18
(I0
tp659
g20
tp660
Rp661
(I1
(I3
I1
tp662
g27
I00
S'\xe9\x8d\xe5W~\x8b\xbb\xbf\xe9\x8d\xe5W~\x8b\xbb\xbf\xe9\x8d\xe5W~\x8b\xbb\xbf'
p663
tp664
bsS'_mean'
p665
NsS'_prior_mean'
p666
I0
sS'_woodbury_chol'
p667
g17
(g18
(I0
tp668
g20
tp669
Rp670
(I1
(I3
I3
tp671
g27
I01
S'q\xb4\xb2\x9e\x1cw\n@\xa8\x8d\x0b@\xf7\x91\xf2\r\xa8\x8d\x0b@\xf7\x91\xf2\r\x00\x00\x00\x00\x00\x00\x00\x00q\xb4\xb2\x9e\x1cw\n@\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q\xb4\xb2\x9e\x1cw\n@'
p672
tp673
bsS'_K_chol'
p674
NsS'_K'
p675
g17
(g18
(I0
tp676
g20
tp677
Rp678
(I1
(I3
I3
tp679
g27
I00
S'a\xdbe\xfc\xae\xad%@\x16\x9f\xa0\x9ep\xb7\x0e\x0e\x16\x9f\xa0\x9ep\xb7\x0e\x0e\x16\x9f\xa0\x9ep\xb7\x0e\x0ea\xdbe\xfc\xae\xad%@\x00\x00\x00\x00\x00\x00\x00\x00\x16\x9f\xa0\x9ep\xb7\x0e\x0e\x00\x00\x00\x00\x00\x00\x00\x00a\xdbe\xfc\xae\xad%@'
p680
tp681
bsS'_woodbury_inv'
p682
NsS'_covariance'
p683
NsS'_precision'
p684
NsbsS'inference_method'
p685
g0
(cGPy.inference.latent_function_inference.exact_gaussian_inference
ExactGaussianInference
p686
g5
Ntp687
Rp688
sS'obj_grads'
p689
NsS'Y'
p690
g638
sS'X'
p691
g17
(g635
(I0
tp692
g20
tp693
Rp694
((I1
(I3
I2
tp695
g27
I00
S'\xa3\x97+\xd8<\x1f\xe2?\x00\x00\x00\x00\x00\x00\x00\x00\xd2\xcb\x15l\x9e\x0f\xf9?\x00\x00\x00\x00\x00\x00\x00\x00\xba\xd0\xa8O\x86\xc1\xdb\xbf\x00\x00\x00\x00\x00\x00\x00\x00'
p696
tp697
(dp698
g121
I01
stp699
bsS'likelihood'
p700
g568
sg117
Nsg121
I01
sg125
I01
sS'grad_dict'
p701
(dp702
S'dL_dm'
p703
g661
sS'dL_dthetaL'
p704
g17
(g18
(I0
tp705
g20
tp706
Rp707
(I1
(I3
I1
tp708
g27
I00
S'\x1dB\xac\xfa\x9fm\xa4\xbf\x1dB\xac\xfa\x9fm\xa4\xbf\x1dB\xac\xfa\x9fm\xa4\xbf'
p709
tp710
bsS'dL_dK'
p711
g17
(g18
(I0
tp712
g20
tp713
Rp714
(I1
(I3
I3
tp715
g27
I00
S'\x1dB\xac\xfa\x9fm\xa4\xbf\xdb\xce\xe1G\xc5\xb5w?\xdb\xce\xe1G\xc5\xb5w?\xdb\xce\xe1G\xc5\xb5w?\x1dB\xac\xfa\x9fm\xa4\xbf\xdb\xce\xe1G\xc5\xb5w?\xdb\xce\xe1G\xc5\xb5w?\xdb\xce\xe1G\xc5\xb5w?\x1dB\xac\xfa\x9fm\xa4\xbf'
p716
tp717
bssg255
S'\n    Gaussian Process model for heteroscedastic regression\n\n    This is a thin wrapper around the models.GP class, with a set of sensible defaults\n\n    :param X: input observations\n    :param Y: observed values\n    :param kernel: a GPy kernel, defaults to rbf\n\n    NB: This model does not make inference on the noise outside the training set\n    Inherited from GP: \n\n    General purpose Gaussian process model\n\n    :param X: input observations\n    :param Y: output observations\n    :param kernel: a GPy kernel, defaults to rbf+white\n    :param likelihood: a GPy likelihood\n    :param inference_method: The :class:`~GPy.inference.latent_function_inference.LatentFunctionInference` inference method to use for this GP\n    :rtype: model object\n    :param Norm normalizer:\n        normalize the outputs Y.\n        Prediction will be un-normalized using this normalizer.\n        If normalizer is None, we will normalize using Standardize.\n        If normalizer is False, no normalization will be done.\n\n    .. Note:: Multiple independent outputs are allowed using columns of Y\n\n\n    \nInherited from Parameterized: \n\n    Say m is a handle to a parameterized class.\n\n    Printing parameters::\n\n        - print m:           prints a nice summary over all parameters\n        - print m.name:      prints details for param with name \'name\'\n        - print m[regexp]: prints details for all the parameters\n                             which match (!) regexp\n        - print m[\'\']:       prints details for all parameters\n\n    Fields::\n\n        Name:       The name of the param, can be renamed!\n        Value:      Shape or value, if one-valued\n        Constrain:  constraint of the param, curly "{c}" brackets indicate\n                    some parameters are constrained by c. See detailed print\n                    to get exact constraints.\n        Tied_to:    which paramter it is tied to.\n\n    Getting and setting parameters::\n\n        - Set all values in param to one:      m.name.to.param = 1\n        - Set all values in parameterized:     m.name[:] = 1\n        - Set values to random values:         m[:] = np.random.norm(m.size)\n\n    Handling of constraining, fixing and tieing parameters::\n\n         - You can constrain parameters by calling the constrain on the param itself, e.g:\n\n            - m.name[:,1].constrain_positive()\n            - m.name[0].tie_to(m.name[1])\n\n         - Fixing parameters will fix them to the value they are right now. If you change\n           the parameters value, the param will be fixed to the new value!\n\n         - If you want to operate on all parameters use m[\'\'] to wildcard select all paramters\n           and concatenate them. Printing m[\'\'] will result in printing of all parameters in detail.\n    \nInherited from Parameterizable: \n\n    A parameterisable class.\n\n    This class provides the parameters list (ArrayList) and standard parameter handling,\n    such as {link|unlink}_parameter(), traverse hierarchy and param_array, gradient_array\n    and the empty parameters_changed().\n\n    This class is abstract and should not be instantiated.\n    Use paramz.Parameterized() as node (or leaf) in the parameterized hierarchy.\n    Use paramz.Param() for a leaf in the parameterized hierarchy.\n    \nInherited from OptimizationHandlable: \n\n    This enables optimization handles on an Object as done in GPy 0.4.\n\n    `..._optimizer_copy_transformed`: make sure the transformations and constraints etc are handled\n    \nInherited from Indexable: \n\n    Make an object constrainable with Priors and Transformations.\n\n    TODO: Mappings!! (As in ties etc.)\n\n    Adding a constraint to a Parameter means to tell the highest parent that\n    the constraint was added and making sure that all parameters covered\n    by this object are indeed conforming to the constraint.\n\n    :func:`constrain()` and :func:`unconstrain()` are main methods here\n    \nInherited from Nameable: \n\n    Make an object nameable inside the hierarchy.\n    \nInherited from Gradcheckable: \n\n    Adds the functionality for an object to be gradcheckable.\n    It is just a thin wrapper of a call to the highest parent for now.\n    TODO: Can be done better, by only changing parameters of the current parameter handle,\n    such that object hierarchy only has to change for those.\n    \nInherited from Pickleable: \n\n    Make an object pickleable (See python doc \'pickling\').\n\n    This class allows for pickling support by Memento pattern.\n    _getstate returns a memento of the class, which gets pickled.\n    _setstate(<memento>) (re-)sets the state of the class to the memento\n    \nInherited from object: \nThe most base type\nInherited from Parentable: \n\n    Enable an Object to have a parent.\n\n    Additionally this adds the parent_index, which is the index for the parent\n    to look for in its parameter list.\n    \nInherited from Updateable: \n\n    A model can be updated or not.\n    Make sure updates can be switched on and off.\n    \nInherited from Observable: \n\n    Observable pattern for parameterization.\n\n    This Object allows for observers to register with self and a (bound!) function\n    as an observer. Every time the observable changes, it sends a notification with\n    self as only argument to all its observers.\n    \n'
p718
sS'kern'
p719
g62
sg260
I2
sg44
g62
sS'_log_marginal_likelihood'
p720
cnumpy.core.multiarray
scalar
p721
(g27
S'\x95\xf5/\x13\xe8$\x1a\xc0'
p722
tp723
Rp724
sS'Y_metadata'
p725
(dp726
S'output_index'
p727
g17
(g18
(I0
tp728
g20
tp729
Rp730
(I1
(I3
I1
tp731
g150
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00'
p732
tp733
bssS'preferred_optimizer'
p734
S'lbfgsb'
p735
sg176
NsbsS'n_samples_y'
p736
I30
sS'n_candidates'
p737
I40
sbsS'rng'
p738
cnumpy.random
__RandomState_ctor
p739
(tRp740
(S'MT19937'
p741
g17
(g18
(I0
tp742
g20
tp743
Rp744
(I1
(I624
tp745
g24
(S'u4'
p746
I0
I1
tp747
Rp748
(I3
S'<'
p749
NNNI-1
I-1
I0
tp750
bI00
S'\x00\x00\x00\x00\x01\x00\x00\x00g\x89\x07lA\xcbJqDp\x07H>8\xe7\x93\xb2K\xf5\xf0\xdc\x95\x1f\x14\xd4\xdb\xac\xc0\xdc\xca\xb9<\xd6\xc4\xe0\xbe\xaf\x1b\xcfi\xb2\tH\xbe}\x02k#_\xe0\xf7\n\x8a\\w1\x82\\c$[\x11C\xe7\xca\xef%\xbb\xfb\xa1\xc1\x11\x1b;\xf1\xf2\x8d(t\xaf\x81\x87q\xd2a\x08\xddT\xf8\xadO\x7fV\xe4X\xac>\t\x8f?\x91\xd3\x12\x08Q\x11\x9d7\x12.s\xa4n\xbc\x87\x87\xbb"W\xd3\xb8*\xfd\x95\x83e\xd5Kl\x9e\x11\xbd\x89_\xbe\xc2\x96\x8b\x02\x8b\x89E\xbfu\xce6d\x17m\xdd\x7fC\xc4\'\xe5\xacG\xa7\x1bw\xc8tW\xe5B\xb7\x8e\x1e6\x9f.I\xe0?\x1aa\xf3\x9c\xb1\x06\x0e\xf7\xb5\x7f\x1b\x80j\xd9\xa9a9fzo~\x95\x8b2\xd1P\xa6\xcaZp\x18S\xd6\xe8\xdd<\xc58hHn\xd9o\xd50\xec\xd5\xffn\xb7\r\xff\x95x\xf7\x0b\xff\xe1\x80K\xb1\xea\xec\xe5\xf0\xcd\x89\x9e\xa0H\xe7S\xedQ\xfe/\xd2\xa7\xad\xca~Q\x1e\x020\x1c\x19\xe4\xe4\x86\xebq\x1dW\x97+\xfa\xf5\xaae\x11\x8e\x8f\x03\xdc\x03\xb3\xee\x9d\xb0\x1e\xe5\xe2e\x85\xfc\xfa\xf6)W\xd31yT%p\xa5\x8b6(ge\xc3{\x8d\x97$3\xf1?ec\x01\xaa\xb9eR\x12:$\xad\x1c\xf5v0\\\xc0s\xaa\x98\x91\xcd\x03\xac\xc2}!\xef\xe8W\xf8w\xbe`\x96\x96(m\xed8\xbb\x9b\xa6]\xde\x04\xda\xc8b\x83\x95\xd5\\Q\xc2w\xf8\x0e\xe9\x11l\xfe\xb2K\x9fk\x00\xa9@K\xc76\xfbU\x81\x92\xd6c\xe4L\x8e9YZ\x86&\x83F\xca\x1d\x16\xed\x1e2\x16P\xae\x16\x17_;\xb4\xb3\xc0\xe1V\xa5H\x0et m\xfe\x9a\xd7@\xb6\xa2w\x91l\\\xfd\x89\xe7R\xdcL\x15\xb4\x07"\x9c45,\x002\\\xce,c%0\xa8\xfbsU)\xa4\x0b/\x1f\xe5\x9f\xd6\xb0\xbei\xb1\xe9\xf8K\xb9\n\xd6\xe2\xa1Z\xa0\xdb\xbd\x82\xb1\x19\x08\x1d\xbd$\xa6\x87\xc2\xe1l\x80V\xdf\xd4\x0eU\x16\xca\xd6\xf8\xca\xf7u\x81j\xca\x9c[\xba\x1f\x1c\xba\x1c\xfc\x19\xf8\xc0\x0f\x06\xc3u\x93(\xe2\x15T&\xc16\xf3\xb8K<d\xa1\xb4\x00\xbb\x03\x88U\xda\x9a\x9d\xdf\xb3Q\xb9\xbe;\x88\xfd\x1f\xb7\xe2LeMCS\x04\r\xb4+%G\x1c\xa4\xf5\xf1LG\xd7\t\x83\xdc8U\xc1\xd4\xdc3\x80\x9f,Eh\x9c\xbd\xe9j\xce\x8e\xe6v3\x9f\xf4,%U\x9a\xfe}\xbf\xd7U\x9e-C}\n^\x96\x99\xfeO\x18\x9b\xfc\x9bBEcb\xb1-\x05Kn\xa2\xb0o\x94\x19m\tn\x8821;\xf5\xc0_\x1d\xcc\x13!n\xd8\xec\x11\xa6A\x9f\'\xb1K\x85B\xb1\xac\x8c\xea.\xbd\xc3\x983\x1d\x0c\xa4\xb3I\xf1\x90@\xc9\x00~\x89\xe3\x86\x9b\x9a\xbc\x0e\xd7\xf2b]\x1fU\xd8\xb7#\x1a\xb1\xddSo\xbat\x0e\xce^v\xa0S\x16f;(\xf7n\x99\xe9\x9f\x9d\xdf\x1dX\x8b\xea\r\xca.\x0c\xb8\x8f\xb0A\x1c\x95\x82+\x02\xc9ZOU\x9c*\xe9\xef}"\xacXr\xdc\xcb\xa4[ks\x1e\xde\x1f!\x8f\x12\xca-\xab\xd9\xe9\xea\'\xbe\xd5\xb2p\xc0zeB!\x03\xa0?juMD_\xd8\x8f\xb1E\x1f5\x95m\xd1\x19\xc5\x8f!\xa9$\xe2\x1dz\xe8u\x1c\xf0\x02D\'\x7f\x99\xf77\xeb\x86M\\#u/P<iV\x94I\xb4\x1b\xcd\x06\xbco\xe5\xce\xdb\xd6\x90R\xe4\xf821\xf7\x9f$-\xc0\xbc|5^\x83\n\xc3\x88\xb1be\xc7\x88\x87\x7f\xcb}\x93..\xf2\xce\x9fM}\x7f5.K"\xc9\x98\xd6b\xc9O\xe5c\xca\x82\xa2\xaf\xcb\xa1\x926\xfbx\xfc\x10\xec\x0e7\x03\x020)\xb4\xe7\xf0\xefn\xa6!\xdf\xca\x02\x94\x8c\xfaO\xee\xb1\x8cL:\xd5\xba\xb2\xbfuR\x8cm\xf0M\x8f\xaeV\xe5+\xcao\xb4\x1d\xb4i\xd6\xc7\x1e\xea\xbd\xab\x918+j\xfc\xf2r+\xda\xdfm\x87\x8d7\xd4\nzB\x03\xe9\x80\xcfj\x80\x042\x96CZ\xb3\xfd:\xdc\xce\x8a\x13\xdb\xfe\x1c{\x9aN\xd5U*\xf5\x11\x871\xb4M\xdd@B\xf9\x96f\xec9/\xc0Ds(q:\xee\xfa\xa9\xcb\x7f\x0bd.\xf3-\xc0\r\xe1,q\x87\xcf\x92\xcfJH\x07\x91\x9e?\xcc\xf7\\\xe0\xb5\x8c\xf4_\x0f\xd8\xb3\x83-3\xee\x98\x98Y\xa7\t\x06\xb2 \xf1\x08\xeaM\x9b\x02\xb1B\x96\x11\xd6\x08\xd0,\x18\x8a@\xd4\x9f\xa6\x02\xb8\x83\x11\x06\xadpn\xfe\xbc\x93\xa1\xf8r\x82\t.\x12z\xad\xe9\xceB;\x8a\x96\x87\xb4#I\xc5\xe2\xaf\xb3\xfa\x19\xc9\x8d\x188YZ\x9c\x18\xf4<Q\xd0K1\xb3TY\x11c\x9f\xb8\xa1Bl\xdc\r\xfd\xcc\x10E\xcc\xa6\xbb(\x98\x11\xd6\x1d\r\x8d,\x98\xb2u\xa7\xea\xe19\xe8\x16\xd3\x1a\x12\xd8\x0e&\x8d-\x87\xecm\x88\xe1\xdb4\xd5\xc3)\x117A\x1aV}\xa1\xbb\x95K\xaf\xeczc\xc35,A\x12{Rst\x12\xe7d\xe1\xa7y\x0e\xfb\x9d\x9c\xf2x\x01C\x16\xc4\xf3\x0b\xe6#\xb6\xcf\x92\xb7T\x03\xd4\x8f\xa7CD\xbd\xe7\'\x10\x11\x93\x9fW_\xa6\xb8\xc7\x1a\xfbY]\x87\xcf$\xf1-\xdc\x84 -\x1a\x05\xe2\xeeY\xc1\x08\xa9x\xdd\x9b\x95^6l\xfa\x9d\x8c\xac\xacZF\x88\xb6\xe9\xfc\x1fi\xb2|\x1f\x88v4\x85Lu\xee)\xe8\xe4y\x14\x01\xa5\xd0`\xbeOZ\x93\x06\xffn\xe9\xba\x1f\x0b=p\xea\xc6\xc7wA*\xd5\xc1^\xef\xc1\x00\xf8\xbaC\xa9\x95\xc5\x95\x07_\xac\xe9\xce\xae\xc5\xa9\xdd\x18\xebjo\x15\xd7\xc6&\xf3\xab\xae0\t\xb67A`\xa1E\x18RR1\xf8;\xc3\x18\xaf\xd9\xff\x06\x8aT\x9d\xf4\x98R\xc6\xd4\x893\xd55r\xfa*Lm`w\xc5U\xa4,\x1eE\x1f\x03<T%\x83\xddk\x81-\x99\xd4\xd3ea9\x80yJ\x04\xeb\x9f\xd39\xfbZF3\xcd\x83A\x9f@\xe7x(\x87\x04\xc70C\xd9\xc4"\xf7\xb1\x8f\xaf\x86\xf3\xae/\xe9\x04\x19\xefEp\xec-3b\xf6\xf4?_\xe9\xd5\x14\xb5.* \x95\xd40v\xc3LU\xa5g\xdb\xdd\xfb/\xe2\xbb\x15-\xa6\x13M\xe6\x96\x0eoA\x11\x92\xc0Y\xcf1\x945+o\xc8"x\xe0\xbe*\xda\xc8\xb6\xc6 `\x88A\x89\x97&c-\x92\tJ\xe284\xe4L\xdb1u\xe9\xbb"f\x11L\x9b\xe5\xa4\xa6x^\xa4\rK\x01@\'e<\xcd\xbd\xa9\x08o\x98%\xee+\xf0Z\xceX)~\x85\x13|]H\xac\x96\xc5\x909\x92Yb\xac\xa9\x1e\\\xd6\x87\xa1`i\xa8M\xfci-\xaal\xa0\x93H\x0f\xb9\xdf\x02h2\xbd\xe3P\xba\xf1~zcs\x8f\xc3}\xe6\xf6\x93\xb9\xe8;c7J53S\xb8>\xf41\x89\x91\xb7\xc1m<\x93\x92\xaa\xe9\xb1t\\g\xa73\xa2|\xab\xfb7OvI\xe1\x0b\x12u\xf4>om\x87\xd43\xab\xc4M\xdf\xf3\x7f\x84\xf8\\\xebM\xb4\xc3+E\xedn\x04\xf4\xd2\xb0\x15\x9f\xebO\\E4\xdc\xb3\xec\x97H\xc6\xb6/\x1b\xc40o\xf6I\xe5K(_\xcc\xdf\xad\x90\xbch\x93!\x85\xc0\x88Ol\xde\x90\xc6\x19\x88T{m\x83\xa9\xb0\x8c\x18i%\xab\x1a*\xf5in\xb5\xbe.\x1c(\x1cs\xb5R\x98\xa2\xadQ\xe9\xd8nR\xde\x9f\xf1\xb8\x10C"\\\x12p}v\x05\x963TOV\x91\xb5T\xdc\xfa\x96\xd3<\xfb\x928MQ\xc9\xfe\xc2\xf6}\xa1\xce\xe4\x82&dl|N\xb4\xad\x84g\x96SH\x06`h\x9d\x8d>\x89\x8c\xf8\xd0\x92\xd8\x0fXupc(gi\xb6=\xb4\x0c=\xe5C\xf7\x0cx\x9e\x80;\xffz\xbd\x84\x11*j\x85\x1dV\x11\xe8\xf8\x8fZ\xbc\xea]\xc3\x04\xe66\xcc=\xa1&Z\x8fCH\xc6C\xdc\xf9\x99+\x8ej\xd9\x8c\x93p\x1a+~Z\x8av\x95\xca\xf1\x16&\xf3_\x91\xec\x08a3\xba,,0\x9c\x9e\x0e\xa2\xa9\xe2\n\xe6\x00\x1f\xdc\x1d\xbc8\xb7\x856\xafU\x9f\x03R\x11\xd2\xfd\x16\xa3\xfb\x05\xd2\x0f\xe8dqv\ra\xfd\x1a\xee\xb0\xa1j\xc9\xe0\x1c\xc52_\xea\x12\x00%Ut4(i\x1fQ"\xcc\x03\xfe\xb5\xee\xf87\xbb\x84\x9b\xe1\xa7\x8eW\xe4%\xd7\x1f\x0bp\xd7\x08`\xea\x12%-\x14\xe4\xfc\')\x0ck\xa4\x86:7#\t\xc8\x85\xb9\xdd\xb5Esto\xd7\xdf|!\xd7`\xef\xdc\xa9\xa9\x0e[N\xd9+I2\x05\xc1\x9a\xf8\xbd=\xbe\xab\xbf\xdc\xc2R\x87@!eG\x1e\xf2J\xc3\xf1\xb5u\x95\xdb\xe0\x9c\x1f\xd8\x17\x9b\xf6r\xbem-\x82\xf3w\xcc\xadb\xa0\xd26P\x98D\xc0\xaa\xd6|\xc7\x1a\x83\xc8\\\x04\xc58~\x1f\xd0\xd4\x90\xa2\xf2Z\xc6\x0e\x93e\x8b\x8fO\xadP.F\xa9\xbc\x83\xf0-\xe0@2\x1b\x9f~=\x08\xb9\\\xcb]\x0c$7\xa6\x9f\x0b\xd4\x04q\xc5\xf5\xf9\x0e7\xcc\xbc_\xee\xcfFy\xc5\xa1\x1cP\xcf\x10\x00\\\xca\xa64\xdb\x16\xa6\x9d2\xccB\x81\xd8\x91j@V\xf0\x98\x9c^\t$"I\xbc+\xd1*c\xc0\x01\xfayT\xfc\xd9b\xb9\x0c]j\xc9~\x8c\xbbI\xab\xd5I\x9b\x1d\xee\x88\x91\x90\xf7\xce\xcf-\x08\xb0\x17\xc9W\x90\x80\x94\xd1H\x1d\xa2\xaf^E\xf3\xcf\x97=\xfc,\xc9\xb1\xb4n\x7f\xac{/\xb6\xe3\xeb\xad\x13\xcd\x8d\x0f\x0e \xa9\xa0;\xe0\xdb\xc4\xa0k\xb4\x84"ys\xd5\xb5\xcad`\x04\xf6\xdf}I\xb8\x8dE\xaf\xa8v_\xb7Y\xcd\xd0e\x00\x1e\xad\xa6\x13\xebi\x11\xc9\xeb\x1b\xff\xfd"\xb9A\xb8\xab\xa7FJ\xc3\x1bY\xe51\x84\xfe\r\xc8%\x8e;\xf7`\x19\x98\x1f-\x8e\x14\xe4\xec\x127\xb2\x10\xea\xd8$`\x17\x8d#\x8e\xce\\\x07\xfdo\x08\xafO\x07\x80XS\xb0\xa3\x7f\xcdnD\x0f\xcf\x85\xf9~\xc7\x8ccn\x86\xaa\xa2w\xc2(H\xe7,\xc4\xf6e\x8bd\xd3kQB;\xee\x90GD\tA\xc7f\xaa\x90\x9f\xd8\xbf\xfe7\x9dJ\x14\xcb\xbc\x00B\xad]\xfb\xa1\xda~|\xffx\x84\x17\xe5q\xe3v\x9bI\x95\xdb"\xd5\x9a\xea]\x07/\xfb\xcf\x8c/0\xb4\xb50\x19\x1ak'
p751
tp752
bI624
I0
F0.0
tp753
bsS'initial_random_samples'
p754
I10
sS'X_'
p755
g17
(g18
(I0
tp756
g20
tp757
Rp758
(I1
(I3
I2
tp759
g27
I00
S'\xa3\x97+\xd8<\x1f\xe2?\x00\x00\x00\x00\x00\x00\x00\x00\xd2\xcb\x15l\x9e\x0f\xf9?\x00\x00\x00\x00\x00\x00\x00\x00\xba\xd0\xa8O\x86\xc1\xdb\xbf\x00\x00\x00\x00\x00\x00\x00\x00'
p760
tp761
bsS'y_'
p762
g17
(g18
(I0
tp763
g20
tp764
Rp765
(I1
(I3
I1
tp766
g27
I00
S'?P\xf8\x070\xd7\xf2\xbf?P\xf8\x070\xd7\xf2\xbf?P\xf8\x070\xd7\xf2\xbf'
p767
tp768
bsg35
g38
sS'maxf'
p769
I1000
sS'rand_X_query'
p770
g17
(g18
(I0
tp771
g20
tp772
Rp773
(I1
(I8
tp774
g27
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x1c\xc7q\x1c\xc7q\xbc?\x1c\xc7q\x1c\xc7q\xcc?UUUUUU\xd5?\x1c\xc7q\x1c\xc7q\xdc?8\x8e\xe38\x8e\xe3\xe8?\x1c\xc7q\x1c\xc7q\xec?\x00\x00\x00\x00\x00\x00\xf0?'
p775
tp776
bsb.